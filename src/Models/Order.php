<?php
/**
 * Order
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@smartevent.pl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartEventSDK\Models;

use \ArrayAccess;
use \SmartEventSDK\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tokenValue' => 'string',
        'channel' => '\SmartEventSDK\Models\Channel[]',
        'checkoutState' => 'string',
        'items' => '\SmartEventSDK\Models\OrderItem[]',
        'referer' => 'string',
        'googleAnalyticsCode' => 'string',
        'invoiceException' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tokenValue' => null,
        'channel' => null,
        'checkoutState' => null,
        'items' => null,
        'referer' => null,
        'googleAnalyticsCode' => null,
        'invoiceException' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tokenValue' => 'token_value',
        'channel' => 'channel',
        'checkoutState' => 'checkout_state',
        'items' => 'items',
        'referer' => 'referer',
        'googleAnalyticsCode' => 'google_analytics_code',
        'invoiceException' => 'invoice_exception'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tokenValue' => 'setTokenValue',
        'channel' => 'setChannel',
        'checkoutState' => 'setCheckoutState',
        'items' => 'setItems',
        'referer' => 'setReferer',
        'googleAnalyticsCode' => 'setGoogleAnalyticsCode',
        'invoiceException' => 'setInvoiceException'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tokenValue' => 'getTokenValue',
        'channel' => 'getChannel',
        'checkoutState' => 'getCheckoutState',
        'items' => 'getItems',
        'referer' => 'getReferer',
        'googleAnalyticsCode' => 'getGoogleAnalyticsCode',
        'invoiceException' => 'getInvoiceException'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tokenValue'] = $data['tokenValue'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['checkoutState'] = $data['checkoutState'] ?? null;
        $this->container['items'] = $data['items'] ?? null;
        $this->container['referer'] = $data['referer'] ?? null;
        $this->container['googleAnalyticsCode'] = $data['googleAnalyticsCode'] ?? null;
        $this->container['invoiceException'] = $data['invoiceException'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tokenValue
     *
     * @return string|null
     */
    public function getTokenValue()
    {
        return $this->container['tokenValue'];
    }

    /**
     * Sets tokenValue
     *
     * @param string|null $tokenValue tokenValue
     *
     * @return self
     */
    public function setTokenValue($tokenValue)
    {
        $this->container['tokenValue'] = $tokenValue;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \SmartEventSDK\Models\Channel[]|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \SmartEventSDK\Models\Channel[]|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets checkoutState
     *
     * @return string|null
     */
    public function getCheckoutState()
    {
        return $this->container['checkoutState'];
    }

    /**
     * Sets checkoutState
     *
     * @param string|null $checkoutState checkoutState
     *
     * @return self
     */
    public function setCheckoutState($checkoutState)
    {
        $this->container['checkoutState'] = $checkoutState;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \SmartEventSDK\Models\OrderItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \SmartEventSDK\Models\OrderItem[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets referer
     *
     * @return string|null
     */
    public function getReferer()
    {
        return $this->container['referer'];
    }

    /**
     * Sets referer
     *
     * @param string|null $referer Id of affiliate referer
     *
     * @return self
     */
    public function setReferer($referer)
    {
        $this->container['referer'] = $referer;

        return $this;
    }

    /**
     * Gets googleAnalyticsCode
     *
     * @return string|null
     */
    public function getGoogleAnalyticsCode()
    {
        return $this->container['googleAnalyticsCode'];
    }

    /**
     * Sets googleAnalyticsCode
     *
     * @param string|null $googleAnalyticsCode Google Analytics conversion code used to send GA notification after payment
     *
     * @return self
     */
    public function setGoogleAnalyticsCode($googleAnalyticsCode)
    {
        $this->container['googleAnalyticsCode'] = $googleAnalyticsCode;

        return $this;
    }

    /**
     * Gets invoiceException
     *
     * @return string|null
     */
    public function getInvoiceException()
    {
        return $this->container['invoiceException'];
    }

    /**
     * Sets invoiceException
     *
     * @param string|null $invoiceException Information why invoice can not be issued
     *
     * @return self
     */
    public function setInvoiceException($invoiceException)
    {
        $this->container['invoiceException'] = $invoiceException;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


