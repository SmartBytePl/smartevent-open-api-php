<?php
/**
 * Ticket
 *
 * PHP version 5
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@smartevent.pl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartEventSDK\Models;

use \ArrayAccess;
use \SmartEventSDK\ObjectSerializer;

/**
 * Ticket Class Doc Comment
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Ticket implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'onHold' => 'int',
        'onHand' => 'int',
        'alternativeOnHand' => 'string',
        'tracked' => 'bool',
        'visibleAfterSoldOut' => 'bool',
        'salableAfterSoldOut' => 'bool',
        'taxCategory' => '\SmartEventSDK\Models\TaxCategory',
        'channelPricings' => 'map[string,\SmartEventSDK\Models\ChannelPricing]',
        'translations' => 'map[string,\SmartEventSDK\Models\TranslationTicket]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'code' => null,
        'onHold' => 'int32',
        'onHand' => 'int32',
        'alternativeOnHand' => null,
        'tracked' => null,
        'visibleAfterSoldOut' => null,
        'salableAfterSoldOut' => null,
        'taxCategory' => null,
        'channelPricings' => null,
        'translations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'onHold' => 'on_hold',
        'onHand' => 'on_hand',
        'alternativeOnHand' => 'alternative_on_hand',
        'tracked' => 'tracked',
        'visibleAfterSoldOut' => 'visible_after_sold_out',
        'salableAfterSoldOut' => 'salable_after_sold_out',
        'taxCategory' => 'tax_category',
        'channelPricings' => 'channel_pricings',
        'translations' => 'translations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'onHold' => 'setOnHold',
        'onHand' => 'setOnHand',
        'alternativeOnHand' => 'setAlternativeOnHand',
        'tracked' => 'setTracked',
        'visibleAfterSoldOut' => 'setVisibleAfterSoldOut',
        'salableAfterSoldOut' => 'setSalableAfterSoldOut',
        'taxCategory' => 'setTaxCategory',
        'channelPricings' => 'setChannelPricings',
        'translations' => 'setTranslations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'onHold' => 'getOnHold',
        'onHand' => 'getOnHand',
        'alternativeOnHand' => 'getAlternativeOnHand',
        'tracked' => 'getTracked',
        'visibleAfterSoldOut' => 'getVisibleAfterSoldOut',
        'salableAfterSoldOut' => 'getSalableAfterSoldOut',
        'taxCategory' => 'getTaxCategory',
        'channelPricings' => 'getChannelPricings',
        'translations' => 'getTranslations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['onHold'] = isset($data['onHold']) ? $data['onHold'] : null;
        $this->container['onHand'] = isset($data['onHand']) ? $data['onHand'] : null;
        $this->container['alternativeOnHand'] = isset($data['alternativeOnHand']) ? $data['alternativeOnHand'] : null;
        $this->container['tracked'] = isset($data['tracked']) ? $data['tracked'] : null;
        $this->container['visibleAfterSoldOut'] = isset($data['visibleAfterSoldOut']) ? $data['visibleAfterSoldOut'] : null;
        $this->container['salableAfterSoldOut'] = isset($data['salableAfterSoldOut']) ? $data['salableAfterSoldOut'] : null;
        $this->container['taxCategory'] = isset($data['taxCategory']) ? $data['taxCategory'] : null;
        $this->container['channelPricings'] = isset($data['channelPricings']) ? $data['channelPricings'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets onHold
     *
     * @return int|null
     */
    public function getOnHold()
    {
        return $this->container['onHold'];
    }

    /**
     * Sets onHold
     *
     * @param int|null $onHold Number of sold tickets
     *
     * @return $this
     */
    public function setOnHold($onHold)
    {
        $this->container['onHold'] = $onHold;

        return $this;
    }

    /**
     * Gets onHand
     *
     * @return int|null
     */
    public function getOnHand()
    {
        return $this->container['onHand'];
    }

    /**
     * Sets onHand
     *
     * @param int|null $onHand Number of available tickets
     *
     * @return $this
     */
    public function setOnHand($onHand)
    {
        $this->container['onHand'] = $onHand;

        return $this;
    }

    /**
     * Gets alternativeOnHand
     *
     * @return string|null
     */
    public function getAlternativeOnHand()
    {
        return $this->container['alternativeOnHand'];
    }

    /**
     * Sets alternativeOnHand
     *
     * @param string|null $alternativeOnHand Alternative number of available tickets it is used to show specific value for the user
     *
     * @return $this
     */
    public function setAlternativeOnHand($alternativeOnHand)
    {
        $this->container['alternativeOnHand'] = $alternativeOnHand;

        return $this;
    }

    /**
     * Gets tracked
     *
     * @return bool|null
     */
    public function getTracked()
    {
        return $this->container['tracked'];
    }

    /**
     * Sets tracked
     *
     * @param bool|null $tracked tracked
     *
     * @return $this
     */
    public function setTracked($tracked)
    {
        $this->container['tracked'] = $tracked;

        return $this;
    }

    /**
     * Gets visibleAfterSoldOut
     *
     * @return bool|null
     */
    public function getVisibleAfterSoldOut()
    {
        return $this->container['visibleAfterSoldOut'];
    }

    /**
     * Sets visibleAfterSoldOut
     *
     * @param bool|null $visibleAfterSoldOut visibleAfterSoldOut
     *
     * @return $this
     */
    public function setVisibleAfterSoldOut($visibleAfterSoldOut)
    {
        $this->container['visibleAfterSoldOut'] = $visibleAfterSoldOut;

        return $this;
    }

    /**
     * Gets salableAfterSoldOut
     *
     * @return bool|null
     */
    public function getSalableAfterSoldOut()
    {
        return $this->container['salableAfterSoldOut'];
    }

    /**
     * Sets salableAfterSoldOut
     *
     * @param bool|null $salableAfterSoldOut salableAfterSoldOut
     *
     * @return $this
     */
    public function setSalableAfterSoldOut($salableAfterSoldOut)
    {
        $this->container['salableAfterSoldOut'] = $salableAfterSoldOut;

        return $this;
    }

    /**
     * Gets taxCategory
     *
     * @return \SmartEventSDK\Models\TaxCategory|null
     */
    public function getTaxCategory()
    {
        return $this->container['taxCategory'];
    }

    /**
     * Sets taxCategory
     *
     * @param \SmartEventSDK\Models\TaxCategory|null $taxCategory taxCategory
     *
     * @return $this
     */
    public function setTaxCategory($taxCategory)
    {
        $this->container['taxCategory'] = $taxCategory;

        return $this;
    }

    /**
     * Gets channelPricings
     *
     * @return map[string,\SmartEventSDK\Models\ChannelPricing]|null
     */
    public function getChannelPricings()
    {
        return $this->container['channelPricings'];
    }

    /**
     * Sets channelPricings
     *
     * @param map[string,\SmartEventSDK\Models\ChannelPricing]|null $channelPricings Keys reference to code of a channel
     *
     * @return $this
     */
    public function setChannelPricings($channelPricings)
    {
        $this->container['channelPricings'] = $channelPricings;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return map[string,\SmartEventSDK\Models\TranslationTicket]|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param map[string,\SmartEventSDK\Models\TranslationTicket]|null $translations Keys reference to code of a translation
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


