<?php
/**
 * OrdersApi
 * PHP version 7.2
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@smartevent.pl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartEventSDK\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use SmartEventSDK\ApiException;
use SmartEventSDK\Configuration;
use SmartEventSDK\HeaderSelector;
use SmartEventSDK\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
    * Set the host index
    *
    * @param int $hostIndex Host index (required)
    */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
    * Get the host index
    *
    * @return int Host index
    */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
    * @return Configuration
    */
    public function getConfig()
    {
        return $this->config;
    }

    /**
    * Operation orderCreate
    *
    * Create order in system
    *
    * @param  string $customerName Customer name (required)
    * @param  string $customerSurname Customer surname (required)
    * @param  string $customerPhone Customer phone number (required)
    * @param  string $customerEmail Customer email (required)
    * @param  string $deliveryName Name (required)
    * @param  string $deliverySurname Surname (required)
    * @param  string $deliveryPhone Phone number (required)
    * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
    * @param  int[] $id Array of tickets ids (required)
    * @param  int[] $qty Array of tickets quantitys (required)
    * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string $customerCompany Customer company name (optional)
    * @param  string $customerStreet Street address (optional)
    * @param  string $customerCity City name (optional)
    * @param  string $customerPostcode Post code (optional)
    * @param  string $customerCountryCode Country code (optional)
    * @param  string $customerVatid Vat ID only digits and signs (optional)
    * @param  string $customerNewsletter If user sign in to newsletter (optional)
    * @param  string $customerFacebook Facebook identificator (optional)
    * @param  string $customerLinkedin LinkedIn identificator (optional)
    * @param  string $customerTwitter Twitter identificator (optional)
    * @param  string $customerInstagram Instagram identificator (optional)
    * @param  string $customerGoogleplus GooglePlus identificator (optional)
    * @param  string $deliveryCompany Company Name (optional)
    * @param  string $deliveryStreet Street address (optional)
    * @param  string $deliveryCity City name (optional)
    * @param  string $deliveryPostcode Post code (optional)
    * @param  string $deliveryCountryCode Country code (optional)
    * @param  string $deliveryVatid Vat ID only digits and signs (optional)
    * @param  string $notes customer comments for order (optional)
    * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
    * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
    * @param  string $coupon Name of the coupon to be applied (optional)
    * @param  string $ref Affiliate referer identficator (optional)
    * @param  string $ga Google Analytics conversion code (optional)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return string|\SmartEventSDK\Models\GeneralError
    */
    public function orderCreate($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
    list($response) = $this->orderCreateWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga);
        return $response;
    }

    /**
    * Operation orderCreateWithHttpInfo
    *
    * Create order in system
    *
    * @param  string $customerName Customer name (required)
    * @param  string $customerSurname Customer surname (required)
    * @param  string $customerPhone Customer phone number (required)
    * @param  string $customerEmail Customer email (required)
    * @param  string $deliveryName Name (required)
    * @param  string $deliverySurname Surname (required)
    * @param  string $deliveryPhone Phone number (required)
    * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
    * @param  int[] $id Array of tickets ids (required)
    * @param  int[] $qty Array of tickets quantitys (required)
    * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string $customerCompany Customer company name (optional)
    * @param  string $customerStreet Street address (optional)
    * @param  string $customerCity City name (optional)
    * @param  string $customerPostcode Post code (optional)
    * @param  string $customerCountryCode Country code (optional)
    * @param  string $customerVatid Vat ID only digits and signs (optional)
    * @param  string $customerNewsletter If user sign in to newsletter (optional)
    * @param  string $customerFacebook Facebook identificator (optional)
    * @param  string $customerLinkedin LinkedIn identificator (optional)
    * @param  string $customerTwitter Twitter identificator (optional)
    * @param  string $customerInstagram Instagram identificator (optional)
    * @param  string $customerGoogleplus GooglePlus identificator (optional)
    * @param  string $deliveryCompany Company Name (optional)
    * @param  string $deliveryStreet Street address (optional)
    * @param  string $deliveryCity City name (optional)
    * @param  string $deliveryPostcode Post code (optional)
    * @param  string $deliveryCountryCode Country code (optional)
    * @param  string $deliveryVatid Vat ID only digits and signs (optional)
    * @param  string $notes customer comments for order (optional)
    * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
    * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
    * @param  string $coupon Name of the coupon to be applied (optional)
    * @param  string $ref Affiliate referer identficator (optional)
    * @param  string $ga Google Analytics conversion code (optional)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of string|\SmartEventSDK\Models\GeneralError, HTTP status code, HTTP response headers (array of strings)
    */
    public function orderCreateWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        $request = $this->orderCreateRequest($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga);
        $returnType = 'string';

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $this->throwApiExceptionFromRequestException($e);
        }

        $statusCode = $response->getStatusCode();

        if ($this->isCorrectResponse($statusCode)) {
            return ObjectSerializer::responseBuilder($response, $returnType);
        }

        switch ($statusCode) {
            case 200:
                $returnType = 'string';
            break;
            case 500:
                $returnType = '\SmartEventSDK\Models\GeneralError';
            break;
        }
        $headers = $response ? $response->getHeaders() : [];
        $body = $response ? $response->getBody() : null;
        $responseData = ObjectSerializer::deserialize($body, $returnType, $headers);
        $this->throwApiException($statusCode, $response, $request, null, $responseData);
    }

    /**
    * Operation orderCreateAsync
    *
    * Create order in system
    *
    * @param  string $customerName Customer name (required)
    * @param  string $customerSurname Customer surname (required)
    * @param  string $customerPhone Customer phone number (required)
    * @param  string $customerEmail Customer email (required)
    * @param  string $deliveryName Name (required)
    * @param  string $deliverySurname Surname (required)
    * @param  string $deliveryPhone Phone number (required)
    * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
    * @param  int[] $id Array of tickets ids (required)
    * @param  int[] $qty Array of tickets quantitys (required)
    * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string $customerCompany Customer company name (optional)
    * @param  string $customerStreet Street address (optional)
    * @param  string $customerCity City name (optional)
    * @param  string $customerPostcode Post code (optional)
    * @param  string $customerCountryCode Country code (optional)
    * @param  string $customerVatid Vat ID only digits and signs (optional)
    * @param  string $customerNewsletter If user sign in to newsletter (optional)
    * @param  string $customerFacebook Facebook identificator (optional)
    * @param  string $customerLinkedin LinkedIn identificator (optional)
    * @param  string $customerTwitter Twitter identificator (optional)
    * @param  string $customerInstagram Instagram identificator (optional)
    * @param  string $customerGoogleplus GooglePlus identificator (optional)
    * @param  string $deliveryCompany Company Name (optional)
    * @param  string $deliveryStreet Street address (optional)
    * @param  string $deliveryCity City name (optional)
    * @param  string $deliveryPostcode Post code (optional)
    * @param  string $deliveryCountryCode Country code (optional)
    * @param  string $deliveryVatid Vat ID only digits and signs (optional)
    * @param  string $notes customer comments for order (optional)
    * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
    * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
    * @param  string $coupon Name of the coupon to be applied (optional)
    * @param  string $ref Affiliate referer identficator (optional)
    * @param  string $ga Google Analytics conversion code (optional)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function orderCreateAsync($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        return $this->orderCreateAsyncWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
    * Operation orderCreateAsyncWithHttpInfo
    *
    * Create order in system
    *
    * @param  string $customerName Customer name (required)
    * @param  string $customerSurname Customer surname (required)
    * @param  string $customerPhone Customer phone number (required)
    * @param  string $customerEmail Customer email (required)
    * @param  string $deliveryName Name (required)
    * @param  string $deliverySurname Surname (required)
    * @param  string $deliveryPhone Phone number (required)
    * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
    * @param  int[] $id Array of tickets ids (required)
    * @param  int[] $qty Array of tickets quantitys (required)
    * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string $customerCompany Customer company name (optional)
    * @param  string $customerStreet Street address (optional)
    * @param  string $customerCity City name (optional)
    * @param  string $customerPostcode Post code (optional)
    * @param  string $customerCountryCode Country code (optional)
    * @param  string $customerVatid Vat ID only digits and signs (optional)
    * @param  string $customerNewsletter If user sign in to newsletter (optional)
    * @param  string $customerFacebook Facebook identificator (optional)
    * @param  string $customerLinkedin LinkedIn identificator (optional)
    * @param  string $customerTwitter Twitter identificator (optional)
    * @param  string $customerInstagram Instagram identificator (optional)
    * @param  string $customerGoogleplus GooglePlus identificator (optional)
    * @param  string $deliveryCompany Company Name (optional)
    * @param  string $deliveryStreet Street address (optional)
    * @param  string $deliveryCity City name (optional)
    * @param  string $deliveryPostcode Post code (optional)
    * @param  string $deliveryCountryCode Country code (optional)
    * @param  string $deliveryVatid Vat ID only digits and signs (optional)
    * @param  string $notes customer comments for order (optional)
    * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
    * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
    * @param  string $coupon Name of the coupon to be applied (optional)
    * @param  string $ref Affiliate referer identficator (optional)
    * @param  string $ga Google Analytics conversion code (optional)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function orderCreateAsyncWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        $returnType = 'string';
        $request = $this->orderCreateRequest($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return ObjectSerializer::responseBuilder($response, $returnType);
                },
                function (RequestException $exception) {
                    $this->throwApiExceptionFromRequestException($exception);
                }
            );
    }

    /**
    * Create request for operation 'orderCreate'
    *
    * @param  string $customerName Customer name (required)
    * @param  string $customerSurname Customer surname (required)
    * @param  string $customerPhone Customer phone number (required)
    * @param  string $customerEmail Customer email (required)
    * @param  string $deliveryName Name (required)
    * @param  string $deliverySurname Surname (required)
    * @param  string $deliveryPhone Phone number (required)
    * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
    * @param  int[] $id Array of tickets ids (required)
    * @param  int[] $qty Array of tickets quantitys (required)
    * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
    * @param  string $customerCompany Customer company name (optional)
    * @param  string $customerStreet Street address (optional)
    * @param  string $customerCity City name (optional)
    * @param  string $customerPostcode Post code (optional)
    * @param  string $customerCountryCode Country code (optional)
    * @param  string $customerVatid Vat ID only digits and signs (optional)
    * @param  string $customerNewsletter If user sign in to newsletter (optional)
    * @param  string $customerFacebook Facebook identificator (optional)
    * @param  string $customerLinkedin LinkedIn identificator (optional)
    * @param  string $customerTwitter Twitter identificator (optional)
    * @param  string $customerInstagram Instagram identificator (optional)
    * @param  string $customerGoogleplus GooglePlus identificator (optional)
    * @param  string $deliveryCompany Company Name (optional)
    * @param  string $deliveryStreet Street address (optional)
    * @param  string $deliveryCity City name (optional)
    * @param  string $deliveryPostcode Post code (optional)
    * @param  string $deliveryCountryCode Country code (optional)
    * @param  string $deliveryVatid Vat ID only digits and signs (optional)
    * @param  string $notes customer comments for order (optional)
    * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
    * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
    * @param  string $coupon Name of the coupon to be applied (optional)
    * @param  string $ref Affiliate referer identficator (optional)
    * @param  string $ga Google Analytics conversion code (optional)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Psr7\Request
    */
    public function orderCreateRequest($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        $this->assertIsNotEmpty($customerName, 'Missing the required parameter $customerName when calling orderCreate');
        $this->assertIsNotEmpty($customerSurname, 'Missing the required parameter $customerSurname when calling orderCreate');
        $this->assertIsNotEmpty($customerPhone, 'Missing the required parameter $customerPhone when calling orderCreate');
        $this->assertIsNotEmpty($customerEmail, 'Missing the required parameter $customerEmail when calling orderCreate');
        $this->assertIsNotEmpty($deliveryName, 'Missing the required parameter $deliveryName when calling orderCreate');
        $this->assertIsNotEmpty($deliverySurname, 'Missing the required parameter $deliverySurname when calling orderCreate');
        $this->assertIsNotEmpty($deliveryPhone, 'Missing the required parameter $deliveryPhone when calling orderCreate');
        $this->assertIsNotEmpty($channelCode, 'Missing the required parameter $channelCode when calling orderCreate');
        $this->assertIsNotEmpty($id, 'Missing the required parameter $id when calling orderCreate');
        $this->assertIsNotEmpty($qty, 'Missing the required parameter $qty when calling orderCreate');
        $resourcePath = '/order/create';
        $httpMethod = 'GET';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $isMultipart = false;

        if ($participantName !== null) {
            $queryParams += $this->buildQueryParam($participantName, 'form', 'participant_name');
        }
        if ($participantSurname !== null) {
            $queryParams += $this->buildQueryParam($participantSurname, 'form', 'participant_surname');
        }
        if ($participantEmail !== null) {
            $queryParams += $this->buildQueryParam($participantEmail, 'form', 'participant_email');
        }
        if ($participantPhone !== null) {
            $queryParams += $this->buildQueryParam($participantPhone, 'form', 'participant_phone');
        }
        if ($participantComment !== null) {
            $queryParams += $this->buildQueryParam($participantComment, 'form', 'participant_comment');
        }
        if ($participantStreet !== null) {
            $queryParams += $this->buildQueryParam($participantStreet, 'form', 'participant_street');
        }
        if ($participantCity !== null) {
            $queryParams += $this->buildQueryParam($participantCity, 'form', 'participant_city');
        }
        if ($participantPostcode !== null) {
            $queryParams += $this->buildQueryParam($participantPostcode, 'form', 'participant_postcode');
        }
        if ($participantCountryCode !== null) {
            $queryParams += $this->buildQueryParam($participantCountryCode, 'form', 'participant_country_code');
        }
        if ($participantClothesSize !== null) {
            $queryParams += $this->buildQueryParam($participantClothesSize, 'form', 'participant_clothes_size');
        }
        if ($customerCompany !== null) {
            $queryParams += $this->buildQueryParam($customerCompany, 'form', 'customer_company');
        }
        if ($customerName !== null) {
            $queryParams += $this->buildQueryParam($customerName, 'form', 'customer_name');
        }
        if ($customerSurname !== null) {
            $queryParams += $this->buildQueryParam($customerSurname, 'form', 'customer_surname');
        }
        if ($customerPhone !== null) {
            $queryParams += $this->buildQueryParam($customerPhone, 'form', 'customer_phone');
        }
        if ($customerEmail !== null) {
            $queryParams += $this->buildQueryParam($customerEmail, 'form', 'customer_email');
        }
        if ($customerStreet !== null) {
            $queryParams += $this->buildQueryParam($customerStreet, 'form', 'customer_street');
        }
        if ($customerCity !== null) {
            $queryParams += $this->buildQueryParam($customerCity, 'form', 'customer_city');
        }
        if ($customerPostcode !== null) {
            $queryParams += $this->buildQueryParam($customerPostcode, 'form', 'customer_postcode');
        }
        if ($customerCountryCode !== null) {
            $queryParams += $this->buildQueryParam($customerCountryCode, 'form', 'customer_country_code');
        }
        if ($customerVatid !== null) {
            $queryParams += $this->buildQueryParam($customerVatid, 'form', 'customer_vatid');
        }
        if ($customerNewsletter !== null) {
            $queryParams += $this->buildQueryParam($customerNewsletter, 'form', 'customer_newsletter');
        }
        if ($customerFacebook !== null) {
            $queryParams += $this->buildQueryParam($customerFacebook, 'form', 'customer_facebook');
        }
        if ($customerLinkedin !== null) {
            $queryParams += $this->buildQueryParam($customerLinkedin, 'form', 'customer_linkedin');
        }
        if ($customerTwitter !== null) {
            $queryParams += $this->buildQueryParam($customerTwitter, 'form', 'customer_twitter');
        }
        if ($customerInstagram !== null) {
            $queryParams += $this->buildQueryParam($customerInstagram, 'form', 'customer_instagram');
        }
        if ($customerGoogleplus !== null) {
            $queryParams += $this->buildQueryParam($customerGoogleplus, 'form', 'customer_googleplus');
        }
        if ($deliveryCompany !== null) {
            $queryParams += $this->buildQueryParam($deliveryCompany, 'form', 'delivery_company');
        }
        if ($deliveryName !== null) {
            $queryParams += $this->buildQueryParam($deliveryName, 'form', 'delivery_name');
        }
        if ($deliverySurname !== null) {
            $queryParams += $this->buildQueryParam($deliverySurname, 'form', 'delivery_surname');
        }
        if ($deliveryPhone !== null) {
            $queryParams += $this->buildQueryParam($deliveryPhone, 'form', 'delivery_phone');
        }
        if ($deliveryStreet !== null) {
            $queryParams += $this->buildQueryParam($deliveryStreet, 'form', 'delivery_street');
        }
        if ($deliveryCity !== null) {
            $queryParams += $this->buildQueryParam($deliveryCity, 'form', 'delivery_city');
        }
        if ($deliveryPostcode !== null) {
            $queryParams += $this->buildQueryParam($deliveryPostcode, 'form', 'delivery_postcode');
        }
        if ($deliveryCountryCode !== null) {
            $queryParams += $this->buildQueryParam($deliveryCountryCode, 'form', 'delivery_country_code');
        }
        if ($deliveryVatid !== null) {
            $queryParams += $this->buildQueryParam($deliveryVatid, 'form', 'delivery_vatid');
        }
        if ($notes !== null) {
            $queryParams += $this->buildQueryParam($notes, 'form', 'notes');
        }
        if ($channelCode !== null) {
            $queryParams += $this->buildQueryParam($channelCode, 'form', '_channel_code');
        }
        if ($currencyCode !== null) {
            $queryParams += $this->buildQueryParam($currencyCode, 'form', 'currency_code');
        }
        if ($localeCode !== null) {
            $queryParams += $this->buildQueryParam($localeCode, 'form', 'locale_code');
        }
        if ($coupon !== null) {
            $queryParams += $this->buildQueryParam($coupon, 'form', 'coupon');
        }
        if ($ref !== null) {
            $queryParams += $this->buildQueryParam($ref, 'form', 'ref');
        }
        if ($ga !== null) {
            $queryParams += $this->buildQueryParam($ga, 'form', '_ga');
        }
        if ($id !== null) {
            $queryParams += $this->buildQueryParam($id, 'form', 'id');
        }
        if ($qty !== null) {
            $queryParams += $this->buildQueryParam($qty, 'form', 'qty');
        }
        if ($isMultipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            $httpBody = $this->buildBody($formParams, $isMultipart, $this->isHeaderContentTypeJson($headers));
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = Query::build($queryParams);
        return new Request($httpMethod, $operationHost . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }

    /**
    * Operation orderGetByToken
    *
    * Get details about created order
    *
    * @param  string $tokenValue Registration identifier. (required)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return \SmartEventSDK\Models\Order
    */
    public function orderGetByToken($tokenValue)
    {
    list($response) = $this->orderGetByTokenWithHttpInfo($tokenValue);
        return $response;
    }

    /**
    * Operation orderGetByTokenWithHttpInfo
    *
    * Get details about created order
    *
    * @param  string $tokenValue Registration identifier. (required)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of \SmartEventSDK\Models\Order, HTTP status code, HTTP response headers (array of strings)
    */
    public function orderGetByTokenWithHttpInfo($tokenValue)
    {
        $request = $this->orderGetByTokenRequest($tokenValue);
        $returnType = '\SmartEventSDK\Models\Order';

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $this->throwApiExceptionFromRequestException($e);
        }

        $statusCode = $response->getStatusCode();

        if ($this->isCorrectResponse($statusCode)) {
            return ObjectSerializer::responseBuilder($response, $returnType);
        }

        switch ($statusCode) {
            case 200:
                $returnType = '\SmartEventSDK\Models\Order';
            break;
        }
        $headers = $response ? $response->getHeaders() : [];
        $body = $response ? $response->getBody() : null;
        $responseData = ObjectSerializer::deserialize($body, $returnType, $headers);
        $this->throwApiException($statusCode, $response, $request, null, $responseData);
    }

    /**
    * Operation orderGetByTokenAsync
    *
    * Get details about created order
    *
    * @param  string $tokenValue Registration identifier. (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function orderGetByTokenAsync($tokenValue)
    {
        return $this->orderGetByTokenAsyncWithHttpInfo($tokenValue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
    * Operation orderGetByTokenAsyncWithHttpInfo
    *
    * Get details about created order
    *
    * @param  string $tokenValue Registration identifier. (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function orderGetByTokenAsyncWithHttpInfo($tokenValue)
    {
        $returnType = '\SmartEventSDK\Models\Order';
        $request = $this->orderGetByTokenRequest($tokenValue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return ObjectSerializer::responseBuilder($response, $returnType);
                },
                function (RequestException $exception) {
                    $this->throwApiExceptionFromRequestException($exception);
                }
            );
    }

    /**
    * Create request for operation 'orderGetByToken'
    *
    * @param  string $tokenValue Registration identifier. (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Psr7\Request
    */
    public function orderGetByTokenRequest($tokenValue)
    {
        $this->assertIsNotEmpty($tokenValue, 'Missing the required parameter $tokenValue when calling orderGetByToken');
        $resourcePath = '/order/{tokenValue}';
        $httpMethod = 'GET';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $isMultipart = false;

        // path params
        if ($tokenValue !== null) {
            $resourcePath = str_replace('{' . 'tokenValue' . '}',
                ObjectSerializer::toPathValue($tokenValue),
                $resourcePath
            );
        }
        if ($isMultipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            $httpBody = $this->buildBody($formParams, $isMultipart, $this->isHeaderContentTypeJson($headers));
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = Query::build($queryParams);
        return new Request($httpMethod, $operationHost . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }

    /**
    * Operation orderGetCalculation
    *
    * Calculate order
    *
    * @param  int[] $id array of tickets ids (required)
    * @param  int[] $qty array of tickets quantitys (required)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return \SmartEventSDK\Models\CalculateResponse
    */
    public function orderGetCalculation($id, $qty)
    {
    list($response) = $this->orderGetCalculationWithHttpInfo($id, $qty);
        return $response;
    }

    /**
    * Operation orderGetCalculationWithHttpInfo
    *
    * Calculate order
    *
    * @param  int[] $id array of tickets ids (required)
    * @param  int[] $qty array of tickets quantitys (required)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of \SmartEventSDK\Models\CalculateResponse, HTTP status code, HTTP response headers (array of strings)
    */
    public function orderGetCalculationWithHttpInfo($id, $qty)
    {
        $request = $this->orderGetCalculationRequest($id, $qty);
        $returnType = '\SmartEventSDK\Models\CalculateResponse';

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $this->throwApiExceptionFromRequestException($e);
        }

        $statusCode = $response->getStatusCode();

        if ($this->isCorrectResponse($statusCode)) {
            return ObjectSerializer::responseBuilder($response, $returnType);
        }

        switch ($statusCode) {
            case 200:
                $returnType = '\SmartEventSDK\Models\CalculateResponse';
            break;
        }
        $headers = $response ? $response->getHeaders() : [];
        $body = $response ? $response->getBody() : null;
        $responseData = ObjectSerializer::deserialize($body, $returnType, $headers);
        $this->throwApiException($statusCode, $response, $request, null, $responseData);
    }

    /**
    * Operation orderGetCalculationAsync
    *
    * Calculate order
    *
    * @param  int[] $id array of tickets ids (required)
    * @param  int[] $qty array of tickets quantitys (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function orderGetCalculationAsync($id, $qty)
    {
        return $this->orderGetCalculationAsyncWithHttpInfo($id, $qty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
    * Operation orderGetCalculationAsyncWithHttpInfo
    *
    * Calculate order
    *
    * @param  int[] $id array of tickets ids (required)
    * @param  int[] $qty array of tickets quantitys (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function orderGetCalculationAsyncWithHttpInfo($id, $qty)
    {
        $returnType = '\SmartEventSDK\Models\CalculateResponse';
        $request = $this->orderGetCalculationRequest($id, $qty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return ObjectSerializer::responseBuilder($response, $returnType);
                },
                function (RequestException $exception) {
                    $this->throwApiExceptionFromRequestException($exception);
                }
            );
    }

    /**
    * Create request for operation 'orderGetCalculation'
    *
    * @param  int[] $id array of tickets ids (required)
    * @param  int[] $qty array of tickets quantitys (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Psr7\Request
    */
    public function orderGetCalculationRequest($id, $qty)
    {
        $this->assertIsNotEmpty($id, 'Missing the required parameter $id when calling orderGetCalculation');
        $this->assertIsNotEmpty($qty, 'Missing the required parameter $qty when calling orderGetCalculation');
        $resourcePath = '/order/calculate';
        $httpMethod = 'GET';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $isMultipart = false;

        if ($id !== null) {
            $queryParams += $this->buildQueryParam($id, 'form', 'id');
        }
        if ($qty !== null) {
            $queryParams += $this->buildQueryParam($qty, 'form', 'qty');
        }
        if ($isMultipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            $httpBody = $this->buildBody($formParams, $isMultipart, $this->isHeaderContentTypeJson($headers));
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = Query::build($queryParams);
        return new Request($httpMethod, $operationHost . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }


    /**
    * Create http client option
    *
    * @throws \RuntimeException on file opening failure
    * @return array of http client options
    */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
    * @param RequestException $e
    * @param mixed|null       $responseData
    *
    * @return void
    * @throws ApiException
    */
    private function throwApiExceptionFromRequestException(RequestException $e, $responseData = null): void
    {
        $this->throwApiException((int) $e->getCode(), $e->getResponse(), $e->getRequest(), $e->getMessage(), $responseData);
    }

    /**
    * @param int                    $statusCode
    * @param ResponseInterface|null $response
    * @param RequestInterface|null  $request
    * @param string|null            $message
    * @param mixed|null             $responseData
    *
    * @return void
    * @throws ApiException
    */
    private function throwApiException(
        int $statusCode,
        ?ResponseInterface $response = null,
        ?RequestInterface $request = null,
        ?string $message = null,
        $responseData = null
    ): void
    {
        $message = sprintf('[%d] Error connecting to the API (url: %s) . %s',
            $statusCode,
            ($request) ? $request->getUri() : '',
            $message
        );
        $headers = $response ? $response->getHeaders() : [];
        $body = $response ? $response->getBody() : null;

        $exception = new ApiException($message, $statusCode, $headers, $body);
        $exception->setResponseObject($responseData);

        throw $exception;
    }


    /**
    * @param int $statusCode
    * @return bool
    */
    private function isCorrectResponse(int $statusCode): bool
    {
        return $statusCode >= 200 && $statusCode < 300;
    }

    /**
    * @param $parameter
    * @param string $message
    */
    private function assertIsNotEmpty($parameter, string $message): void
    {
        if ($parameter === null || (is_array($parameter) && count($parameter) === 0)) {
            throw new \InvalidArgumentException($message);
        }
    }

    /**
     * @param $parameter
     * @param string $style
     * @param string $basename
     * @return array
     */
    private function buildQueryParam($parameter, string $style, string $basename): array
    {
        $queryParams = [];
        if('form' === $style && is_array($parameter)) {
            foreach($parameter as $key => $value) {
                $queryParams[$basename.'['.$key.']'] = $value;
            }
        } else {
            $queryParams[$basename] = $parameter;
        }

        return $queryParams;
    }

    /**
    * @param array $formParams
    * @param bool $isMultipart
    * @param bool $isJson
    * @return MultipartStream|string
    */
    private function buildBody(array $formParams, bool $isMultipart, bool $isJson)
    {
        if ($isMultipart) {
            $multipartContents = [];
            foreach ($formParams as $formParamName => $formParamValue) {
                $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                foreach ($formParamValueItems as $formParamValueItem) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValueItem
                    ];
                }
            }
            // for HTTP post (form)
            return new MultipartStream($multipartContents);
        } elseif ($isJson) {
            return \GuzzleHttp\json_encode($formParams);
        } else {
            // for HTTP post (form)
            return \GuzzleHttp\Psr7\build_query($formParams);
        }
    }

    /**
    * @param $headers
    * @return bool
    */
    private function isHeaderContentTypeJson($headers): bool
    {
        return $headers['Content-Type'] === 'application/json';
    }

}
