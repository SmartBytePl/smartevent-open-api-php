<?php
/**
 * OrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@smartevent.pl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartEventSDK\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SmartEventSDK\ApiException;
use SmartEventSDK\Configuration;
use SmartEventSDK\HeaderSelector;
use SmartEventSDK\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderCreate
     *
     * Create order in system
     *
     * @param  string $customerName Customer name (required)
     * @param  string $customerSurname Customer surname (required)
     * @param  string $customerPhone Customer phone number (required)
     * @param  string $customerEmail Customer email (required)
     * @param  string $deliveryName Name (required)
     * @param  string $deliverySurname Surname (required)
     * @param  string $deliveryPhone Phone number (required)
     * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customerCompany Customer company name (optional)
     * @param  string $customerStreet Street address (optional)
     * @param  string $customerCity City name (optional)
     * @param  string $customerPostcode Post code (optional)
     * @param  string $customerCountryCode Country code (optional)
     * @param  string $customerVatid Vat ID only digits and signs (optional)
     * @param  string $customerNewsletter If user sign in to newsletter (optional)
     * @param  string $customerFacebook Facebook identificator (optional)
     * @param  string $customerLinkedin LinkedIn identificator (optional)
     * @param  string $customerTwitter Twitter identificator (optional)
     * @param  string $customerInstagram Instagram identificator (optional)
     * @param  string $customerGoogleplus GooglePlus identificator (optional)
     * @param  string $deliveryCompany Company Name (optional)
     * @param  string $deliveryStreet Street address (optional)
     * @param  string $deliveryCity City name (optional)
     * @param  string $deliveryPostcode Post code (optional)
     * @param  string $deliveryCountryCode Country code (optional)
     * @param  string $deliveryVatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $ga Google Analytics conversion code (optional)
     *
     * @throws \SmartEventSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|\SmartEventSDK\Models\GeneralError
     */
    public function orderCreate($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        list($response) = $this->orderCreateWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga);
        return $response;
    }

    /**
     * Operation orderCreateWithHttpInfo
     *
     * Create order in system
     *
     * @param  string $customerName Customer name (required)
     * @param  string $customerSurname Customer surname (required)
     * @param  string $customerPhone Customer phone number (required)
     * @param  string $customerEmail Customer email (required)
     * @param  string $deliveryName Name (required)
     * @param  string $deliverySurname Surname (required)
     * @param  string $deliveryPhone Phone number (required)
     * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customerCompany Customer company name (optional)
     * @param  string $customerStreet Street address (optional)
     * @param  string $customerCity City name (optional)
     * @param  string $customerPostcode Post code (optional)
     * @param  string $customerCountryCode Country code (optional)
     * @param  string $customerVatid Vat ID only digits and signs (optional)
     * @param  string $customerNewsletter If user sign in to newsletter (optional)
     * @param  string $customerFacebook Facebook identificator (optional)
     * @param  string $customerLinkedin LinkedIn identificator (optional)
     * @param  string $customerTwitter Twitter identificator (optional)
     * @param  string $customerInstagram Instagram identificator (optional)
     * @param  string $customerGoogleplus GooglePlus identificator (optional)
     * @param  string $deliveryCompany Company Name (optional)
     * @param  string $deliveryStreet Street address (optional)
     * @param  string $deliveryCity City name (optional)
     * @param  string $deliveryPostcode Post code (optional)
     * @param  string $deliveryCountryCode Country code (optional)
     * @param  string $deliveryVatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $ga Google Analytics conversion code (optional)
     *
     * @throws \SmartEventSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|\SmartEventSDK\Models\GeneralError, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCreateWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        $request = $this->orderCreateRequest($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\SmartEventSDK\Models\GeneralError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartEventSDK\Models\GeneralError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartEventSDK\Models\GeneralError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCreateAsync
     *
     * Create order in system
     *
     * @param  string $customerName Customer name (required)
     * @param  string $customerSurname Customer surname (required)
     * @param  string $customerPhone Customer phone number (required)
     * @param  string $customerEmail Customer email (required)
     * @param  string $deliveryName Name (required)
     * @param  string $deliverySurname Surname (required)
     * @param  string $deliveryPhone Phone number (required)
     * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customerCompany Customer company name (optional)
     * @param  string $customerStreet Street address (optional)
     * @param  string $customerCity City name (optional)
     * @param  string $customerPostcode Post code (optional)
     * @param  string $customerCountryCode Country code (optional)
     * @param  string $customerVatid Vat ID only digits and signs (optional)
     * @param  string $customerNewsletter If user sign in to newsletter (optional)
     * @param  string $customerFacebook Facebook identificator (optional)
     * @param  string $customerLinkedin LinkedIn identificator (optional)
     * @param  string $customerTwitter Twitter identificator (optional)
     * @param  string $customerInstagram Instagram identificator (optional)
     * @param  string $customerGoogleplus GooglePlus identificator (optional)
     * @param  string $deliveryCompany Company Name (optional)
     * @param  string $deliveryStreet Street address (optional)
     * @param  string $deliveryCity City name (optional)
     * @param  string $deliveryPostcode Post code (optional)
     * @param  string $deliveryCountryCode Country code (optional)
     * @param  string $deliveryVatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $ga Google Analytics conversion code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAsync($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        return $this->orderCreateAsyncWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCreateAsyncWithHttpInfo
     *
     * Create order in system
     *
     * @param  string $customerName Customer name (required)
     * @param  string $customerSurname Customer surname (required)
     * @param  string $customerPhone Customer phone number (required)
     * @param  string $customerEmail Customer email (required)
     * @param  string $deliveryName Name (required)
     * @param  string $deliverySurname Surname (required)
     * @param  string $deliveryPhone Phone number (required)
     * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customerCompany Customer company name (optional)
     * @param  string $customerStreet Street address (optional)
     * @param  string $customerCity City name (optional)
     * @param  string $customerPostcode Post code (optional)
     * @param  string $customerCountryCode Country code (optional)
     * @param  string $customerVatid Vat ID only digits and signs (optional)
     * @param  string $customerNewsletter If user sign in to newsletter (optional)
     * @param  string $customerFacebook Facebook identificator (optional)
     * @param  string $customerLinkedin LinkedIn identificator (optional)
     * @param  string $customerTwitter Twitter identificator (optional)
     * @param  string $customerInstagram Instagram identificator (optional)
     * @param  string $customerGoogleplus GooglePlus identificator (optional)
     * @param  string $deliveryCompany Company Name (optional)
     * @param  string $deliveryStreet Street address (optional)
     * @param  string $deliveryCity City name (optional)
     * @param  string $deliveryPostcode Post code (optional)
     * @param  string $deliveryCountryCode Country code (optional)
     * @param  string $deliveryVatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $ga Google Analytics conversion code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAsyncWithHttpInfo($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        $returnType = 'string';
        $request = $this->orderCreateRequest($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName, $participantSurname, $participantEmail, $participantPhone, $participantComment, $participantStreet, $participantCity, $participantPostcode, $participantCountryCode, $participantClothesSize, $customerCompany, $customerStreet, $customerCity, $customerPostcode, $customerCountryCode, $customerVatid, $customerNewsletter, $customerFacebook, $customerLinkedin, $customerTwitter, $customerInstagram, $customerGoogleplus, $deliveryCompany, $deliveryStreet, $deliveryCity, $deliveryPostcode, $deliveryCountryCode, $deliveryVatid, $notes, $currencyCode, $localeCode, $coupon, $ref, $ga);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCreate'
     *
     * @param  string $customerName Customer name (required)
     * @param  string $customerSurname Customer surname (required)
     * @param  string $customerPhone Customer phone number (required)
     * @param  string $customerEmail Customer email (required)
     * @param  string $deliveryName Name (required)
     * @param  string $deliverySurname Surname (required)
     * @param  string $deliveryPhone Phone number (required)
     * @param  string $channelCode Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participantName If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantSurname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantEmail If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPhone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantComment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantStreet Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCity Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantPostcode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantCountryCode Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participantClothesSize Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customerCompany Customer company name (optional)
     * @param  string $customerStreet Street address (optional)
     * @param  string $customerCity City name (optional)
     * @param  string $customerPostcode Post code (optional)
     * @param  string $customerCountryCode Country code (optional)
     * @param  string $customerVatid Vat ID only digits and signs (optional)
     * @param  string $customerNewsletter If user sign in to newsletter (optional)
     * @param  string $customerFacebook Facebook identificator (optional)
     * @param  string $customerLinkedin LinkedIn identificator (optional)
     * @param  string $customerTwitter Twitter identificator (optional)
     * @param  string $customerInstagram Instagram identificator (optional)
     * @param  string $customerGoogleplus GooglePlus identificator (optional)
     * @param  string $deliveryCompany Company Name (optional)
     * @param  string $deliveryStreet Street address (optional)
     * @param  string $deliveryCity City name (optional)
     * @param  string $deliveryPostcode Post code (optional)
     * @param  string $deliveryCountryCode Country code (optional)
     * @param  string $deliveryVatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currencyCode Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $localeCode Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $ga Google Analytics conversion code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderCreateRequest($customerName, $customerSurname, $customerPhone, $customerEmail, $deliveryName, $deliverySurname, $deliveryPhone, $channelCode, $id, $qty, $participantName = null, $participantSurname = null, $participantEmail = null, $participantPhone = null, $participantComment = null, $participantStreet = null, $participantCity = null, $participantPostcode = null, $participantCountryCode = null, $participantClothesSize = null, $customerCompany = null, $customerStreet = null, $customerCity = null, $customerPostcode = null, $customerCountryCode = null, $customerVatid = null, $customerNewsletter = null, $customerFacebook = null, $customerLinkedin = null, $customerTwitter = null, $customerInstagram = null, $customerGoogleplus = null, $deliveryCompany = null, $deliveryStreet = null, $deliveryCity = null, $deliveryPostcode = null, $deliveryCountryCode = null, $deliveryVatid = null, $notes = null, $currencyCode = null, $localeCode = null, $coupon = null, $ref = null, $ga = null)
    {
        // verify the required parameter 'customerName' is set
        if ($customerName === null || (is_array($customerName) && count($customerName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerName when calling orderCreate'
            );
        }
        // verify the required parameter 'customerSurname' is set
        if ($customerSurname === null || (is_array($customerSurname) && count($customerSurname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerSurname when calling orderCreate'
            );
        }
        // verify the required parameter 'customerPhone' is set
        if ($customerPhone === null || (is_array($customerPhone) && count($customerPhone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerPhone when calling orderCreate'
            );
        }
        // verify the required parameter 'customerEmail' is set
        if ($customerEmail === null || (is_array($customerEmail) && count($customerEmail) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customerEmail when calling orderCreate'
            );
        }
        // verify the required parameter 'deliveryName' is set
        if ($deliveryName === null || (is_array($deliveryName) && count($deliveryName) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryName when calling orderCreate'
            );
        }
        // verify the required parameter 'deliverySurname' is set
        if ($deliverySurname === null || (is_array($deliverySurname) && count($deliverySurname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliverySurname when calling orderCreate'
            );
        }
        // verify the required parameter 'deliveryPhone' is set
        if ($deliveryPhone === null || (is_array($deliveryPhone) && count($deliveryPhone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deliveryPhone when calling orderCreate'
            );
        }
        // verify the required parameter 'channelCode' is set
        if ($channelCode === null || (is_array($channelCode) && count($channelCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channelCode when calling orderCreate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderCreate'
            );
        }
        // verify the required parameter 'qty' is set
        if ($qty === null || (is_array($qty) && count($qty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qty when calling orderCreate'
            );
        }

        $resourcePath = '/order/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($participantName !== null) {
            if('form' === 'form' && is_array($participantName)) {
                foreach($participantName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_name[]'] = $participantName;
            }
        }
        // query params
        if ($participantSurname !== null) {
            if('form' === 'form' && is_array($participantSurname)) {
                foreach($participantSurname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_surname[]'] = $participantSurname;
            }
        }
        // query params
        if ($participantEmail !== null) {
            if('form' === 'form' && is_array($participantEmail)) {
                foreach($participantEmail as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_email[]'] = $participantEmail;
            }
        }
        // query params
        if ($participantPhone !== null) {
            if('form' === 'form' && is_array($participantPhone)) {
                foreach($participantPhone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_phone[]'] = $participantPhone;
            }
        }
        // query params
        if ($participantComment !== null) {
            if('form' === 'form' && is_array($participantComment)) {
                foreach($participantComment as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_comment[]'] = $participantComment;
            }
        }
        // query params
        if ($participantStreet !== null) {
            if('form' === 'form' && is_array($participantStreet)) {
                foreach($participantStreet as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_street[]'] = $participantStreet;
            }
        }
        // query params
        if ($participantCity !== null) {
            if('form' === 'form' && is_array($participantCity)) {
                foreach($participantCity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_city[]'] = $participantCity;
            }
        }
        // query params
        if ($participantPostcode !== null) {
            if('form' === 'form' && is_array($participantPostcode)) {
                foreach($participantPostcode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_postcode[]'] = $participantPostcode;
            }
        }
        // query params
        if ($participantCountryCode !== null) {
            if('form' === 'form' && is_array($participantCountryCode)) {
                foreach($participantCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_country_code[]'] = $participantCountryCode;
            }
        }
        // query params
        if ($participantClothesSize !== null) {
            if('form' === 'form' && is_array($participantClothesSize)) {
                foreach($participantClothesSize as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['participant_clothes_size[]'] = $participantClothesSize;
            }
        }
        // query params
        if ($customerCompany !== null) {
            if('form' === 'form' && is_array($customerCompany)) {
                foreach($customerCompany as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_company'] = $customerCompany;
            }
        }
        // query params
        if ($customerName !== null) {
            if('form' === 'form' && is_array($customerName)) {
                foreach($customerName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_name'] = $customerName;
            }
        }
        // query params
        if ($customerSurname !== null) {
            if('form' === 'form' && is_array($customerSurname)) {
                foreach($customerSurname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_surname'] = $customerSurname;
            }
        }
        // query params
        if ($customerPhone !== null) {
            if('form' === 'form' && is_array($customerPhone)) {
                foreach($customerPhone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_phone'] = $customerPhone;
            }
        }
        // query params
        if ($customerEmail !== null) {
            if('form' === 'form' && is_array($customerEmail)) {
                foreach($customerEmail as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_email'] = $customerEmail;
            }
        }
        // query params
        if ($customerStreet !== null) {
            if('form' === 'form' && is_array($customerStreet)) {
                foreach($customerStreet as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_street'] = $customerStreet;
            }
        }
        // query params
        if ($customerCity !== null) {
            if('form' === 'form' && is_array($customerCity)) {
                foreach($customerCity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_city'] = $customerCity;
            }
        }
        // query params
        if ($customerPostcode !== null) {
            if('form' === 'form' && is_array($customerPostcode)) {
                foreach($customerPostcode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_postcode'] = $customerPostcode;
            }
        }
        // query params
        if ($customerCountryCode !== null) {
            if('form' === 'form' && is_array($customerCountryCode)) {
                foreach($customerCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_country_code'] = $customerCountryCode;
            }
        }
        // query params
        if ($customerVatid !== null) {
            if('form' === 'form' && is_array($customerVatid)) {
                foreach($customerVatid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_vatid'] = $customerVatid;
            }
        }
        // query params
        if ($customerNewsletter !== null) {
            if('form' === 'form' && is_array($customerNewsletter)) {
                foreach($customerNewsletter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_newsletter'] = $customerNewsletter;
            }
        }
        // query params
        if ($customerFacebook !== null) {
            if('form' === 'form' && is_array($customerFacebook)) {
                foreach($customerFacebook as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_facebook'] = $customerFacebook;
            }
        }
        // query params
        if ($customerLinkedin !== null) {
            if('form' === 'form' && is_array($customerLinkedin)) {
                foreach($customerLinkedin as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_linkedin'] = $customerLinkedin;
            }
        }
        // query params
        if ($customerTwitter !== null) {
            if('form' === 'form' && is_array($customerTwitter)) {
                foreach($customerTwitter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_twitter'] = $customerTwitter;
            }
        }
        // query params
        if ($customerInstagram !== null) {
            if('form' === 'form' && is_array($customerInstagram)) {
                foreach($customerInstagram as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_instagram'] = $customerInstagram;
            }
        }
        // query params
        if ($customerGoogleplus !== null) {
            if('form' === 'form' && is_array($customerGoogleplus)) {
                foreach($customerGoogleplus as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_googleplus'] = $customerGoogleplus;
            }
        }
        // query params
        if ($deliveryCompany !== null) {
            if('form' === 'form' && is_array($deliveryCompany)) {
                foreach($deliveryCompany as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_company'] = $deliveryCompany;
            }
        }
        // query params
        if ($deliveryName !== null) {
            if('form' === 'form' && is_array($deliveryName)) {
                foreach($deliveryName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_name'] = $deliveryName;
            }
        }
        // query params
        if ($deliverySurname !== null) {
            if('form' === 'form' && is_array($deliverySurname)) {
                foreach($deliverySurname as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_surname'] = $deliverySurname;
            }
        }
        // query params
        if ($deliveryPhone !== null) {
            if('form' === 'form' && is_array($deliveryPhone)) {
                foreach($deliveryPhone as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_phone'] = $deliveryPhone;
            }
        }
        // query params
        if ($deliveryStreet !== null) {
            if('form' === 'form' && is_array($deliveryStreet)) {
                foreach($deliveryStreet as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_street'] = $deliveryStreet;
            }
        }
        // query params
        if ($deliveryCity !== null) {
            if('form' === 'form' && is_array($deliveryCity)) {
                foreach($deliveryCity as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_city'] = $deliveryCity;
            }
        }
        // query params
        if ($deliveryPostcode !== null) {
            if('form' === 'form' && is_array($deliveryPostcode)) {
                foreach($deliveryPostcode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_postcode'] = $deliveryPostcode;
            }
        }
        // query params
        if ($deliveryCountryCode !== null) {
            if('form' === 'form' && is_array($deliveryCountryCode)) {
                foreach($deliveryCountryCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_country_code'] = $deliveryCountryCode;
            }
        }
        // query params
        if ($deliveryVatid !== null) {
            if('form' === 'form' && is_array($deliveryVatid)) {
                foreach($deliveryVatid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['delivery_vatid'] = $deliveryVatid;
            }
        }
        // query params
        if ($notes !== null) {
            if('form' === 'form' && is_array($notes)) {
                foreach($notes as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['notes'] = $notes;
            }
        }
        // query params
        if ($channelCode !== null) {
            if('form' === 'form' && is_array($channelCode)) {
                foreach($channelCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['_channel_code'] = $channelCode;
            }
        }
        // query params
        if ($currencyCode !== null) {
            if('form' === 'form' && is_array($currencyCode)) {
                foreach($currencyCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['currency_code'] = $currencyCode;
            }
        }
        // query params
        if ($localeCode !== null) {
            if('form' === 'form' && is_array($localeCode)) {
                foreach($localeCode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['locale_code'] = $localeCode;
            }
        }
        // query params
        if ($coupon !== null) {
            if('form' === 'form' && is_array($coupon)) {
                foreach($coupon as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['coupon'] = $coupon;
            }
        }
        // query params
        if ($ref !== null) {
            if('form' === 'form' && is_array($ref)) {
                foreach($ref as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ref'] = $ref;
            }
        }
        // query params
        if ($ga !== null) {
            if('form' === 'form' && is_array($ga)) {
                foreach($ga as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['_ga'] = $ga;
            }
        }
        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id;
            }
        }
        // query params
        if ($qty !== null) {
            if('form' === 'form' && is_array($qty)) {
                foreach($qty as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['qty[]'] = $qty;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetByToken
     *
     * Get details about created order
     *
     * @param  string $tokenValue Registration identifier. (required)
     *
     * @throws \SmartEventSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartEventSDK\Models\Order
     */
    public function orderGetByToken($tokenValue)
    {
        list($response) = $this->orderGetByTokenWithHttpInfo($tokenValue);
        return $response;
    }

    /**
     * Operation orderGetByTokenWithHttpInfo
     *
     * Get details about created order
     *
     * @param  string $tokenValue Registration identifier. (required)
     *
     * @throws \SmartEventSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartEventSDK\Models\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetByTokenWithHttpInfo($tokenValue)
    {
        $request = $this->orderGetByTokenRequest($tokenValue);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SmartEventSDK\Models\Order' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartEventSDK\Models\Order', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartEventSDK\Models\Order';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartEventSDK\Models\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetByTokenAsync
     *
     * Get details about created order
     *
     * @param  string $tokenValue Registration identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByTokenAsync($tokenValue)
    {
        return $this->orderGetByTokenAsyncWithHttpInfo($tokenValue)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetByTokenAsyncWithHttpInfo
     *
     * Get details about created order
     *
     * @param  string $tokenValue Registration identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByTokenAsyncWithHttpInfo($tokenValue)
    {
        $returnType = '\SmartEventSDK\Models\Order';
        $request = $this->orderGetByTokenRequest($tokenValue);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetByToken'
     *
     * @param  string $tokenValue Registration identifier. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetByTokenRequest($tokenValue)
    {
        // verify the required parameter 'tokenValue' is set
        if ($tokenValue === null || (is_array($tokenValue) && count($tokenValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenValue when calling orderGetByToken'
            );
        }

        $resourcePath = '/order/{tokenValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($tokenValue !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenValue' . '}',
                ObjectSerializer::toPathValue($tokenValue),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetCalculation
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \SmartEventSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SmartEventSDK\Models\CalculateResponse
     */
    public function orderGetCalculation($id, $qty)
    {
        list($response) = $this->orderGetCalculationWithHttpInfo($id, $qty);
        return $response;
    }

    /**
     * Operation orderGetCalculationWithHttpInfo
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \SmartEventSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SmartEventSDK\Models\CalculateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetCalculationWithHttpInfo($id, $qty)
    {
        $request = $this->orderGetCalculationRequest($id, $qty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SmartEventSDK\Models\CalculateResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SmartEventSDK\Models\CalculateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SmartEventSDK\Models\CalculateResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SmartEventSDK\Models\CalculateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetCalculationAsync
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetCalculationAsync($id, $qty)
    {
        return $this->orderGetCalculationAsyncWithHttpInfo($id, $qty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetCalculationAsyncWithHttpInfo
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetCalculationAsyncWithHttpInfo($id, $qty)
    {
        $returnType = '\SmartEventSDK\Models\CalculateResponse';
        $request = $this->orderGetCalculationRequest($id, $qty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetCalculation'
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetCalculationRequest($id, $qty)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderGetCalculation'
            );
        }
        // verify the required parameter 'qty' is set
        if ($qty === null || (is_array($qty) && count($qty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qty when calling orderGetCalculation'
            );
        }

        $resourcePath = '/order/calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            if('form' === 'form' && is_array($id)) {
                foreach($id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['id[]'] = $id;
            }
        }
        // query params
        if ($qty !== null) {
            if('form' === 'form' && is_array($qty)) {
                foreach($qty as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['qty[]'] = $qty;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
