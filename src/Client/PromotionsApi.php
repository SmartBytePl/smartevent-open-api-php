<?php
/**
 * PromotionsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * The version of the OpenAPI document: 2.0.16
 * Contact: info@smartevent.pl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SmartEventSDK\Client;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use SmartEventSDK\ApiException;
use SmartEventSDK\Configuration;
use SmartEventSDK\HeaderSelector;
use SmartEventSDK\ObjectSerializer;

/**
 * PromotionsApi Class Doc Comment
 *
 * @category Class
 * @package  SmartEventSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PromotionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
    * Set the host index
    *
    * @param int $hostIndex Host index (required)
    */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
    * Get the host index
    *
    * @return int Host index
    */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
    * @return Configuration
    */
    public function getConfig()
    {
        return $this->config;
    }

    /**
    * Operation couponValidate
    *
    * Verify coupon validiation
    *
    * @param  string $coupon coupon (required)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return string
    */
    public function couponValidate($coupon)
    {
    list($response) = $this->couponValidateWithHttpInfo($coupon);
        return $response;
    }

    /**
    * Operation couponValidateWithHttpInfo
    *
    * Verify coupon validiation
    *
    * @param  string $coupon (required)
    *
    * @throws \SmartEventSDK\ApiException on non-2xx response
    * @throws \InvalidArgumentException
    * @return array of string, HTTP status code, HTTP response headers (array of strings)
    */
    public function couponValidateWithHttpInfo($coupon)
    {
        $request = $this->couponValidateRequest($coupon);
        $returnType = 'string';

        $options = $this->createHttpClientOption();
        try {
            $response = $this->client->send($request, $options);
        } catch (RequestException $e) {
            $this->throwApiExceptionFromRequestException($e);
        }

        $statusCode = $response->getStatusCode();

        if ($this->isCorrectResponse($statusCode)) {
            return ObjectSerializer::responseBuilder($response, $returnType);
        }

        switch ($statusCode) {
            case 200:
                $returnType = 'string';
            break;
        }
        $headers = $response ? $response->getHeaders() : [];
        $body = $response ? $response->getBody() : null;
        $responseData = ObjectSerializer::deserialize($body, $returnType, $headers);
        $this->throwApiException($statusCode, $response, $request, null, $responseData);
    }

    /**
    * Operation couponValidateAsync
    *
    * Verify coupon validiation
    *
    * @param  string $coupon (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function couponValidateAsync($coupon)
    {
        return $this->couponValidateAsyncWithHttpInfo($coupon)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
    * Operation couponValidateAsyncWithHttpInfo
    *
    * Verify coupon validiation
    *
    * @param  string $coupon (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Promise\PromiseInterface
    */
    public function couponValidateAsyncWithHttpInfo($coupon)
    {
        $returnType = 'string';
        $request = $this->couponValidateRequest($coupon);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function (ResponseInterface $response) use ($returnType) {
                    return ObjectSerializer::responseBuilder($response, $returnType);
                },
                function (RequestException $exception) {
                    $this->throwApiExceptionFromRequestException($exception);
                }
            );
    }

    /**
    * Create request for operation 'couponValidate'
    *
    * @param  string $coupon (required)
    *
    * @throws \InvalidArgumentException
    * @return \GuzzleHttp\Psr7\Request
    */
    public function couponValidateRequest($coupon)
    {
        $this->assertIsNotEmpty($coupon, 'Missing the required parameter $coupon when calling couponValidate');
        $resourcePath = '/promotions/coupon/{coupon}';
        $httpMethod = 'GET';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $isMultipart = false;

        // path params
        if ($coupon !== null) {
            $resourcePath = str_replace('{' . 'coupon' . '}',
                ObjectSerializer::toPathValue($coupon),
                $resourcePath
            );
        }
        if ($isMultipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            $httpBody = $this->buildBody($formParams, $isMultipart, $this->isHeaderContentTypeJson($headers));
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = Query::build($queryParams);
        return new Request($httpMethod, $operationHost . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }


    /**
    * Create http client option
    *
    * @throws \RuntimeException on file opening failure
    * @return array of http client options
    */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
    * @param RequestException $e
    * @param mixed|null       $responseData
    *
    * @return void
    * @throws ApiException
    */
    private function throwApiExceptionFromRequestException(RequestException $e, $responseData = null): void
    {
        $this->throwApiException((int) $e->getCode(), $e->getResponse(), $e->getRequest(), $e->getMessage(), $responseData);
    }

    /**
    * @param int                    $statusCode
    * @param ResponseInterface|null $response
    * @param RequestInterface|null  $request
    * @param string|null            $message
    * @param mixed|null             $responseData
    *
    * @return void
    * @throws ApiException
    */
    private function throwApiException(
        int $statusCode,
        ?ResponseInterface $response = null,
        ?RequestInterface $request = null,
        ?string $message = null,
        $responseData = null
    ): void
    {
        $message = sprintf('[%d] Error connecting to the API (url: %s) . %s',
            $statusCode,
            ($request) ? $request->getUri() : '',
            $message
        );
        $headers = $response ? $response->getHeaders() : [];
        $body = $response ? $response->getBody() : null;

        $exception = new ApiException($message, $statusCode, $headers, $body);
        $exception->setResponseObject($responseData);

        throw $exception;
    }


    /**
    * @param int $statusCode
    * @return bool
    */
    private function isCorrectResponse(int $statusCode): bool
    {
        return $statusCode >= 200 && $statusCode < 300;
    }

    /**
    * @param $parameter
    * @param string $message
    */
    private function assertIsNotEmpty($parameter, string $message): void
    {
        if ($parameter === null || (is_array($parameter) && count($parameter) === 0)) {
            throw new \InvalidArgumentException($message);
        }
    }

    /**
     * @param $parameter
     * @param string $style
     * @param string $basename
     * @return array
     */
    private function buildQueryParam($parameter, string $style, string $basename): array
    {
        $queryParams = [];
        if('form' === $style && is_array($parameter)) {
            foreach($parameter as $key => $value) {
                $queryParams[$basename.'['.$key.']'] = $value;
            }
        } else {
            $queryParams[$basename] = $parameter;
        }

        return $queryParams;
    }

    /**
    * @param array $formParams
    * @param bool $isMultipart
    * @param bool $isJson
    * @return MultipartStream|string
    */
    private function buildBody(array $formParams, bool $isMultipart, bool $isJson)
    {
        if ($isMultipart) {
            $multipartContents = [];
            foreach ($formParams as $formParamName => $formParamValue) {
                $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                foreach ($formParamValueItems as $formParamValueItem) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValueItem
                    ];
                }
            }
            // for HTTP post (form)
            return new MultipartStream($multipartContents);
        } elseif ($isJson) {
            return \GuzzleHttp\json_encode($formParams);
        } else {
            // for HTTP post (form)
            return \GuzzleHttp\Psr7\build_query($formParams);
        }
    }

    /**
    * @param $headers
    * @return bool
    */
    private function isHeaderContentTypeJson($headers): bool
    {
        return $headers['Content-Type'] === 'application/json';
    }

}
