<?php
/**
 * OrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.15
 * Contact: info@smartevent.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * OrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderCreate
     *
     * Create order in system
     *
     * @param  string $customer_name Customer name (required)
     * @param  string $customer_surname Customer surname (required)
     * @param  string $customer_phone Customer phone number (required)
     * @param  string $customer_email Customer email (required)
     * @param  string $delivery_name Name (required)
     * @param  string $delivery_surname Surname (required)
     * @param  string $delivery_phone Phone number (required)
     * @param  string $_channel_code Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participant_name If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_surname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_email If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_phone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_comment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_clothes_size Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customer_company Customer company name (optional)
     * @param  string $customer_street Street address (optional)
     * @param  string $customer_city City name (optional)
     * @param  string $customer_postcode Post code (optional)
     * @param  string $customer_country_code Country code (optional)
     * @param  string $customer_vatid Vat ID only digits and signs (optional)
     * @param  string $customer_newsletter If user sign in to newsletter (optional)
     * @param  string $customer_facebook Facebook identificator (optional)
     * @param  string $customer_linkedin LinkedIn identificator (optional)
     * @param  string $customer_twitter Twitter identificator (optional)
     * @param  string $customer_instagram Instagram identificator (optional)
     * @param  string $customer_googleplus GooglePlus identificator (optional)
     * @param  string $delivery_company Company Name (optional)
     * @param  string $delivery_street Street address (optional)
     * @param  string $delivery_city City name (optional)
     * @param  string $delivery_postcode Post code (optional)
     * @param  string $delivery_country_code Country code (optional)
     * @param  string $delivery_vatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currency_code Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $locale_code Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $_ga Google Analytics conversion code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function orderCreate($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name = null, $participant_surname = null, $participant_email = null, $participant_phone = null, $participant_comment = null, $participant_clothes_size = null, $customer_company = null, $customer_street = null, $customer_city = null, $customer_postcode = null, $customer_country_code = null, $customer_vatid = null, $customer_newsletter = null, $customer_facebook = null, $customer_linkedin = null, $customer_twitter = null, $customer_instagram = null, $customer_googleplus = null, $delivery_company = null, $delivery_street = null, $delivery_city = null, $delivery_postcode = null, $delivery_country_code = null, $delivery_vatid = null, $notes = null, $currency_code = null, $locale_code = null, $coupon = null, $ref = null, $_ga = null)
    {
        list($response) = $this->orderCreateWithHttpInfo($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name, $participant_surname, $participant_email, $participant_phone, $participant_comment, $participant_clothes_size, $customer_company, $customer_street, $customer_city, $customer_postcode, $customer_country_code, $customer_vatid, $customer_newsletter, $customer_facebook, $customer_linkedin, $customer_twitter, $customer_instagram, $customer_googleplus, $delivery_company, $delivery_street, $delivery_city, $delivery_postcode, $delivery_country_code, $delivery_vatid, $notes, $currency_code, $locale_code, $coupon, $ref, $_ga);
        return $response;
    }

    /**
     * Operation orderCreateWithHttpInfo
     *
     * Create order in system
     *
     * @param  string $customer_name Customer name (required)
     * @param  string $customer_surname Customer surname (required)
     * @param  string $customer_phone Customer phone number (required)
     * @param  string $customer_email Customer email (required)
     * @param  string $delivery_name Name (required)
     * @param  string $delivery_surname Surname (required)
     * @param  string $delivery_phone Phone number (required)
     * @param  string $_channel_code Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participant_name If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_surname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_email If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_phone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_comment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_clothes_size Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customer_company Customer company name (optional)
     * @param  string $customer_street Street address (optional)
     * @param  string $customer_city City name (optional)
     * @param  string $customer_postcode Post code (optional)
     * @param  string $customer_country_code Country code (optional)
     * @param  string $customer_vatid Vat ID only digits and signs (optional)
     * @param  string $customer_newsletter If user sign in to newsletter (optional)
     * @param  string $customer_facebook Facebook identificator (optional)
     * @param  string $customer_linkedin LinkedIn identificator (optional)
     * @param  string $customer_twitter Twitter identificator (optional)
     * @param  string $customer_instagram Instagram identificator (optional)
     * @param  string $customer_googleplus GooglePlus identificator (optional)
     * @param  string $delivery_company Company Name (optional)
     * @param  string $delivery_street Street address (optional)
     * @param  string $delivery_city City name (optional)
     * @param  string $delivery_postcode Post code (optional)
     * @param  string $delivery_country_code Country code (optional)
     * @param  string $delivery_vatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currency_code Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $locale_code Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $_ga Google Analytics conversion code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderCreateWithHttpInfo($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name = null, $participant_surname = null, $participant_email = null, $participant_phone = null, $participant_comment = null, $participant_clothes_size = null, $customer_company = null, $customer_street = null, $customer_city = null, $customer_postcode = null, $customer_country_code = null, $customer_vatid = null, $customer_newsletter = null, $customer_facebook = null, $customer_linkedin = null, $customer_twitter = null, $customer_instagram = null, $customer_googleplus = null, $delivery_company = null, $delivery_street = null, $delivery_city = null, $delivery_postcode = null, $delivery_country_code = null, $delivery_vatid = null, $notes = null, $currency_code = null, $locale_code = null, $coupon = null, $ref = null, $_ga = null)
    {
        $returnType = 'string';
        $request = $this->orderCreateRequest($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name, $participant_surname, $participant_email, $participant_phone, $participant_comment, $participant_clothes_size, $customer_company, $customer_street, $customer_city, $customer_postcode, $customer_country_code, $customer_vatid, $customer_newsletter, $customer_facebook, $customer_linkedin, $customer_twitter, $customer_instagram, $customer_googleplus, $delivery_company, $delivery_street, $delivery_city, $delivery_postcode, $delivery_country_code, $delivery_vatid, $notes, $currency_code, $locale_code, $coupon, $ref, $_ga);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GeneralError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderCreateAsync
     *
     * Create order in system
     *
     * @param  string $customer_name Customer name (required)
     * @param  string $customer_surname Customer surname (required)
     * @param  string $customer_phone Customer phone number (required)
     * @param  string $customer_email Customer email (required)
     * @param  string $delivery_name Name (required)
     * @param  string $delivery_surname Surname (required)
     * @param  string $delivery_phone Phone number (required)
     * @param  string $_channel_code Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participant_name If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_surname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_email If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_phone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_comment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_clothes_size Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customer_company Customer company name (optional)
     * @param  string $customer_street Street address (optional)
     * @param  string $customer_city City name (optional)
     * @param  string $customer_postcode Post code (optional)
     * @param  string $customer_country_code Country code (optional)
     * @param  string $customer_vatid Vat ID only digits and signs (optional)
     * @param  string $customer_newsletter If user sign in to newsletter (optional)
     * @param  string $customer_facebook Facebook identificator (optional)
     * @param  string $customer_linkedin LinkedIn identificator (optional)
     * @param  string $customer_twitter Twitter identificator (optional)
     * @param  string $customer_instagram Instagram identificator (optional)
     * @param  string $customer_googleplus GooglePlus identificator (optional)
     * @param  string $delivery_company Company Name (optional)
     * @param  string $delivery_street Street address (optional)
     * @param  string $delivery_city City name (optional)
     * @param  string $delivery_postcode Post code (optional)
     * @param  string $delivery_country_code Country code (optional)
     * @param  string $delivery_vatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currency_code Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $locale_code Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $_ga Google Analytics conversion code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAsync($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name = null, $participant_surname = null, $participant_email = null, $participant_phone = null, $participant_comment = null, $participant_clothes_size = null, $customer_company = null, $customer_street = null, $customer_city = null, $customer_postcode = null, $customer_country_code = null, $customer_vatid = null, $customer_newsletter = null, $customer_facebook = null, $customer_linkedin = null, $customer_twitter = null, $customer_instagram = null, $customer_googleplus = null, $delivery_company = null, $delivery_street = null, $delivery_city = null, $delivery_postcode = null, $delivery_country_code = null, $delivery_vatid = null, $notes = null, $currency_code = null, $locale_code = null, $coupon = null, $ref = null, $_ga = null)
    {
        return $this->orderCreateAsyncWithHttpInfo($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name, $participant_surname, $participant_email, $participant_phone, $participant_comment, $participant_clothes_size, $customer_company, $customer_street, $customer_city, $customer_postcode, $customer_country_code, $customer_vatid, $customer_newsletter, $customer_facebook, $customer_linkedin, $customer_twitter, $customer_instagram, $customer_googleplus, $delivery_company, $delivery_street, $delivery_city, $delivery_postcode, $delivery_country_code, $delivery_vatid, $notes, $currency_code, $locale_code, $coupon, $ref, $_ga)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderCreateAsyncWithHttpInfo
     *
     * Create order in system
     *
     * @param  string $customer_name Customer name (required)
     * @param  string $customer_surname Customer surname (required)
     * @param  string $customer_phone Customer phone number (required)
     * @param  string $customer_email Customer email (required)
     * @param  string $delivery_name Name (required)
     * @param  string $delivery_surname Surname (required)
     * @param  string $delivery_phone Phone number (required)
     * @param  string $_channel_code Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participant_name If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_surname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_email If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_phone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_comment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_clothes_size Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customer_company Customer company name (optional)
     * @param  string $customer_street Street address (optional)
     * @param  string $customer_city City name (optional)
     * @param  string $customer_postcode Post code (optional)
     * @param  string $customer_country_code Country code (optional)
     * @param  string $customer_vatid Vat ID only digits and signs (optional)
     * @param  string $customer_newsletter If user sign in to newsletter (optional)
     * @param  string $customer_facebook Facebook identificator (optional)
     * @param  string $customer_linkedin LinkedIn identificator (optional)
     * @param  string $customer_twitter Twitter identificator (optional)
     * @param  string $customer_instagram Instagram identificator (optional)
     * @param  string $customer_googleplus GooglePlus identificator (optional)
     * @param  string $delivery_company Company Name (optional)
     * @param  string $delivery_street Street address (optional)
     * @param  string $delivery_city City name (optional)
     * @param  string $delivery_postcode Post code (optional)
     * @param  string $delivery_country_code Country code (optional)
     * @param  string $delivery_vatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currency_code Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $locale_code Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $_ga Google Analytics conversion code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderCreateAsyncWithHttpInfo($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name = null, $participant_surname = null, $participant_email = null, $participant_phone = null, $participant_comment = null, $participant_clothes_size = null, $customer_company = null, $customer_street = null, $customer_city = null, $customer_postcode = null, $customer_country_code = null, $customer_vatid = null, $customer_newsletter = null, $customer_facebook = null, $customer_linkedin = null, $customer_twitter = null, $customer_instagram = null, $customer_googleplus = null, $delivery_company = null, $delivery_street = null, $delivery_city = null, $delivery_postcode = null, $delivery_country_code = null, $delivery_vatid = null, $notes = null, $currency_code = null, $locale_code = null, $coupon = null, $ref = null, $_ga = null)
    {
        $returnType = 'string';
        $request = $this->orderCreateRequest($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name, $participant_surname, $participant_email, $participant_phone, $participant_comment, $participant_clothes_size, $customer_company, $customer_street, $customer_city, $customer_postcode, $customer_country_code, $customer_vatid, $customer_newsletter, $customer_facebook, $customer_linkedin, $customer_twitter, $customer_instagram, $customer_googleplus, $delivery_company, $delivery_street, $delivery_city, $delivery_postcode, $delivery_country_code, $delivery_vatid, $notes, $currency_code, $locale_code, $coupon, $ref, $_ga);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderCreate'
     *
     * @param  string $customer_name Customer name (required)
     * @param  string $customer_surname Customer surname (required)
     * @param  string $customer_phone Customer phone number (required)
     * @param  string $customer_email Customer email (required)
     * @param  string $delivery_name Name (required)
     * @param  string $delivery_surname Surname (required)
     * @param  string $delivery_phone Phone number (required)
     * @param  string $_channel_code Code of the channel which should be used. If not passed it is resolved on domain base. (required)
     * @param  int[] $id Array of tickets ids (required)
     * @param  int[] $qty Array of tickets quantitys (required)
     * @param  string[] $participant_name If not passed, copied from customer_name. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_surname If not passed, copied from customer_surname. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_email If not passed, copied from customer_email. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_phone If not passed, copied from customer_phone. Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_comment Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string[] $participant_clothes_size Number of participant should be equal number of tickets (sum of values in qty field). (optional)
     * @param  string $customer_company Customer company name (optional)
     * @param  string $customer_street Street address (optional)
     * @param  string $customer_city City name (optional)
     * @param  string $customer_postcode Post code (optional)
     * @param  string $customer_country_code Country code (optional)
     * @param  string $customer_vatid Vat ID only digits and signs (optional)
     * @param  string $customer_newsletter If user sign in to newsletter (optional)
     * @param  string $customer_facebook Facebook identificator (optional)
     * @param  string $customer_linkedin LinkedIn identificator (optional)
     * @param  string $customer_twitter Twitter identificator (optional)
     * @param  string $customer_instagram Instagram identificator (optional)
     * @param  string $customer_googleplus GooglePlus identificator (optional)
     * @param  string $delivery_company Company Name (optional)
     * @param  string $delivery_street Street address (optional)
     * @param  string $delivery_city City name (optional)
     * @param  string $delivery_postcode Post code (optional)
     * @param  string $delivery_country_code Country code (optional)
     * @param  string $delivery_vatid Vat ID only digits and signs (optional)
     * @param  string $notes customer comments for order (optional)
     * @param  string $currency_code Currency of the order. If not passed default channel currency will be used. (optional)
     * @param  string $locale_code Locale of the order. If not passed default channel locale wii be used. (optional)
     * @param  string $coupon Name of the coupon to be applied (optional)
     * @param  string $ref Affiliate referer identficator (optional)
     * @param  string $_ga Google Analytics conversion code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderCreateRequest($customer_name, $customer_surname, $customer_phone, $customer_email, $delivery_name, $delivery_surname, $delivery_phone, $_channel_code, $id, $qty, $participant_name = null, $participant_surname = null, $participant_email = null, $participant_phone = null, $participant_comment = null, $participant_clothes_size = null, $customer_company = null, $customer_street = null, $customer_city = null, $customer_postcode = null, $customer_country_code = null, $customer_vatid = null, $customer_newsletter = null, $customer_facebook = null, $customer_linkedin = null, $customer_twitter = null, $customer_instagram = null, $customer_googleplus = null, $delivery_company = null, $delivery_street = null, $delivery_city = null, $delivery_postcode = null, $delivery_country_code = null, $delivery_vatid = null, $notes = null, $currency_code = null, $locale_code = null, $coupon = null, $ref = null, $_ga = null)
    {
        // verify the required parameter 'customer_name' is set
        if ($customer_name === null || (is_array($customer_name) && count($customer_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_name when calling orderCreate'
            );
        }
        // verify the required parameter 'customer_surname' is set
        if ($customer_surname === null || (is_array($customer_surname) && count($customer_surname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_surname when calling orderCreate'
            );
        }
        // verify the required parameter 'customer_phone' is set
        if ($customer_phone === null || (is_array($customer_phone) && count($customer_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_phone when calling orderCreate'
            );
        }
        // verify the required parameter 'customer_email' is set
        if ($customer_email === null || (is_array($customer_email) && count($customer_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_email when calling orderCreate'
            );
        }
        // verify the required parameter 'delivery_name' is set
        if ($delivery_name === null || (is_array($delivery_name) && count($delivery_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_name when calling orderCreate'
            );
        }
        // verify the required parameter 'delivery_surname' is set
        if ($delivery_surname === null || (is_array($delivery_surname) && count($delivery_surname) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_surname when calling orderCreate'
            );
        }
        // verify the required parameter 'delivery_phone' is set
        if ($delivery_phone === null || (is_array($delivery_phone) && count($delivery_phone) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_phone when calling orderCreate'
            );
        }
        // verify the required parameter '_channel_code' is set
        if ($_channel_code === null || (is_array($_channel_code) && count($_channel_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_channel_code when calling orderCreate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderCreate'
            );
        }
        // verify the required parameter 'qty' is set
        if ($qty === null || (is_array($qty) && count($qty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qty when calling orderCreate'
            );
        }

        $resourcePath = '/order/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($participant_name)) {
            $participant_name = ObjectSerializer::serializeCollection($participant_name, 'multi', true);
        }
        if ($participant_name !== null) {
            $queryParams['participant_name[]'] = ObjectSerializer::toQueryValue($participant_name);
        }
        // query params
        if (is_array($participant_surname)) {
            $participant_surname = ObjectSerializer::serializeCollection($participant_surname, 'multi', true);
        }
        if ($participant_surname !== null) {
            $queryParams['participant_surname[]'] = ObjectSerializer::toQueryValue($participant_surname);
        }
        // query params
        if (is_array($participant_email)) {
            $participant_email = ObjectSerializer::serializeCollection($participant_email, 'multi', true);
        }
        if ($participant_email !== null) {
            $queryParams['participant_email[]'] = ObjectSerializer::toQueryValue($participant_email);
        }
        // query params
        if (is_array($participant_phone)) {
            $participant_phone = ObjectSerializer::serializeCollection($participant_phone, 'multi', true);
        }
        if ($participant_phone !== null) {
            $queryParams['participant_phone[]'] = ObjectSerializer::toQueryValue($participant_phone);
        }
        // query params
        if (is_array($participant_comment)) {
            $participant_comment = ObjectSerializer::serializeCollection($participant_comment, 'multi', true);
        }
        if ($participant_comment !== null) {
            $queryParams['participant_comment[]'] = ObjectSerializer::toQueryValue($participant_comment);
        }
        // query params
        if (is_array($participant_clothes_size)) {
            $participant_clothes_size = ObjectSerializer::serializeCollection($participant_clothes_size, 'multi', true);
        }
        if ($participant_clothes_size !== null) {
            $queryParams['participant_clothes_size[]'] = ObjectSerializer::toQueryValue($participant_clothes_size);
        }
        // query params
        if ($customer_company !== null) {
            $queryParams['customer_company'] = ObjectSerializer::toQueryValue($customer_company);
        }
        // query params
        if ($customer_name !== null) {
            $queryParams['customer_name'] = ObjectSerializer::toQueryValue($customer_name);
        }
        // query params
        if ($customer_surname !== null) {
            $queryParams['customer_surname'] = ObjectSerializer::toQueryValue($customer_surname);
        }
        // query params
        if ($customer_phone !== null) {
            $queryParams['customer_phone'] = ObjectSerializer::toQueryValue($customer_phone);
        }
        // query params
        if ($customer_email !== null) {
            $queryParams['customer_email'] = ObjectSerializer::toQueryValue($customer_email);
        }
        // query params
        if ($customer_street !== null) {
            $queryParams['customer_street'] = ObjectSerializer::toQueryValue($customer_street);
        }
        // query params
        if ($customer_city !== null) {
            $queryParams['customer_city'] = ObjectSerializer::toQueryValue($customer_city);
        }
        // query params
        if ($customer_postcode !== null) {
            $queryParams['customer_postcode'] = ObjectSerializer::toQueryValue($customer_postcode);
        }
        // query params
        if ($customer_country_code !== null) {
            $queryParams['customer_country_code'] = ObjectSerializer::toQueryValue($customer_country_code);
        }
        // query params
        if ($customer_vatid !== null) {
            $queryParams['customer_vatid'] = ObjectSerializer::toQueryValue($customer_vatid);
        }
        // query params
        if ($customer_newsletter !== null) {
            $queryParams['customer_newsletter'] = ObjectSerializer::toQueryValue($customer_newsletter);
        }
        // query params
        if ($customer_facebook !== null) {
            $queryParams['customer_facebook'] = ObjectSerializer::toQueryValue($customer_facebook);
        }
        // query params
        if ($customer_linkedin !== null) {
            $queryParams['customer_linkedin'] = ObjectSerializer::toQueryValue($customer_linkedin);
        }
        // query params
        if ($customer_twitter !== null) {
            $queryParams['customer_twitter'] = ObjectSerializer::toQueryValue($customer_twitter);
        }
        // query params
        if ($customer_instagram !== null) {
            $queryParams['customer_instagram'] = ObjectSerializer::toQueryValue($customer_instagram);
        }
        // query params
        if ($customer_googleplus !== null) {
            $queryParams['customer_googleplus'] = ObjectSerializer::toQueryValue($customer_googleplus);
        }
        // query params
        if ($delivery_company !== null) {
            $queryParams['delivery_company'] = ObjectSerializer::toQueryValue($delivery_company);
        }
        // query params
        if ($delivery_name !== null) {
            $queryParams['delivery_name'] = ObjectSerializer::toQueryValue($delivery_name);
        }
        // query params
        if ($delivery_surname !== null) {
            $queryParams['delivery_surname'] = ObjectSerializer::toQueryValue($delivery_surname);
        }
        // query params
        if ($delivery_phone !== null) {
            $queryParams['delivery_phone'] = ObjectSerializer::toQueryValue($delivery_phone);
        }
        // query params
        if ($delivery_street !== null) {
            $queryParams['delivery_street'] = ObjectSerializer::toQueryValue($delivery_street);
        }
        // query params
        if ($delivery_city !== null) {
            $queryParams['delivery_city'] = ObjectSerializer::toQueryValue($delivery_city);
        }
        // query params
        if ($delivery_postcode !== null) {
            $queryParams['delivery_postcode'] = ObjectSerializer::toQueryValue($delivery_postcode);
        }
        // query params
        if ($delivery_country_code !== null) {
            $queryParams['delivery_country_code'] = ObjectSerializer::toQueryValue($delivery_country_code);
        }
        // query params
        if ($delivery_vatid !== null) {
            $queryParams['delivery_vatid'] = ObjectSerializer::toQueryValue($delivery_vatid);
        }
        // query params
        if ($notes !== null) {
            $queryParams['notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($_channel_code !== null) {
            $queryParams['_channel_code'] = ObjectSerializer::toQueryValue($_channel_code);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currency_code'] = ObjectSerializer::toQueryValue($currency_code);
        }
        // query params
        if ($locale_code !== null) {
            $queryParams['locale_code'] = ObjectSerializer::toQueryValue($locale_code);
        }
        // query params
        if ($coupon !== null) {
            $queryParams['coupon'] = ObjectSerializer::toQueryValue($coupon);
        }
        // query params
        if ($ref !== null) {
            $queryParams['ref'] = ObjectSerializer::toQueryValue($ref);
        }
        // query params
        if ($_ga !== null) {
            $queryParams['_ga'] = ObjectSerializer::toQueryValue($_ga);
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, 'multi', true);
        }
        if ($id !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($qty)) {
            $qty = ObjectSerializer::serializeCollection($qty, 'multi', true);
        }
        if ($qty !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetByToken
     *
     * Get details about created order
     *
     * @param  string $token_value token_value (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Order
     */
    public function orderGetByToken($token_value)
    {
        list($response) = $this->orderGetByTokenWithHttpInfo($token_value);
        return $response;
    }

    /**
     * Operation orderGetByTokenWithHttpInfo
     *
     * Get details about created order
     *
     * @param  string $token_value (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetByTokenWithHttpInfo($token_value)
    {
        $returnType = '\Swagger\Client\Model\Order';
        $request = $this->orderGetByTokenRequest($token_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetByTokenAsync
     *
     * Get details about created order
     *
     * @param  string $token_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByTokenAsync($token_value)
    {
        return $this->orderGetByTokenAsyncWithHttpInfo($token_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetByTokenAsyncWithHttpInfo
     *
     * Get details about created order
     *
     * @param  string $token_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByTokenAsyncWithHttpInfo($token_value)
    {
        $returnType = '\Swagger\Client\Model\Order';
        $request = $this->orderGetByTokenRequest($token_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetByToken'
     *
     * @param  string $token_value (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetByTokenRequest($token_value)
    {
        // verify the required parameter 'token_value' is set
        if ($token_value === null || (is_array($token_value) && count($token_value) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token_value when calling orderGetByToken'
            );
        }

        $resourcePath = '/order/{tokenValue}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($token_value !== null) {
            $resourcePath = str_replace(
                '{' . 'tokenValue' . '}',
                ObjectSerializer::toPathValue($token_value),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetCalculation
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CalculateResponse
     */
    public function orderGetCalculation($id, $qty)
    {
        list($response) = $this->orderGetCalculationWithHttpInfo($id, $qty);
        return $response;
    }

    /**
     * Operation orderGetCalculationWithHttpInfo
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CalculateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetCalculationWithHttpInfo($id, $qty)
    {
        $returnType = '\Swagger\Client\Model\CalculateResponse';
        $request = $this->orderGetCalculationRequest($id, $qty);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CalculateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetCalculationAsync
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetCalculationAsync($id, $qty)
    {
        return $this->orderGetCalculationAsyncWithHttpInfo($id, $qty)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetCalculationAsyncWithHttpInfo
     *
     * Calculate order
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetCalculationAsyncWithHttpInfo($id, $qty)
    {
        $returnType = '\Swagger\Client\Model\CalculateResponse';
        $request = $this->orderGetCalculationRequest($id, $qty);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetCalculation'
     *
     * @param  int[] $id array of tickets ids (required)
     * @param  int[] $qty array of tickets quantitys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderGetCalculationRequest($id, $qty)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling orderGetCalculation'
            );
        }
        // verify the required parameter 'qty' is set
        if ($qty === null || (is_array($qty) && count($qty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $qty when calling orderGetCalculation'
            );
        }

        $resourcePath = '/order/calculate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, 'multi', true);
        }
        if ($id !== null) {
            $queryParams['id[]'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($qty)) {
            $qty = ObjectSerializer::serializeCollection($qty, 'multi', true);
        }
        if ($qty !== null) {
            $queryParams['qty[]'] = ObjectSerializer::toQueryValue($qty);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
