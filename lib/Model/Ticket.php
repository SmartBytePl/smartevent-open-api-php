<?php
/**
 * Ticket
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.8
 * Contact: info@smartevent.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Ticket Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Ticket implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ticket';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'code' => 'string',
'on_hold' => 'int',
'on_hand' => 'int',
'tracked' => 'bool',
'visible_after_sold_out' => 'bool',
'salable_after_sold_out' => 'bool',
'tax_category' => '\Swagger\Client\Model\TaxCategory',
'channel_pricings' => 'map[string,\Swagger\Client\Model\ChannelPricing[]]',
'translations' => 'map[string,\Swagger\Client\Model\TranslationTicket[]]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'code' => null,
'on_hold' => 'int32',
'on_hand' => 'int32',
'tracked' => null,
'visible_after_sold_out' => null,
'salable_after_sold_out' => null,
'tax_category' => null,
'channel_pricings' => null,
'translations' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'code' => 'code',
'on_hold' => 'on_hold',
'on_hand' => 'on_hand',
'tracked' => 'tracked',
'visible_after_sold_out' => 'visible_after_sold_out',
'salable_after_sold_out' => 'salable_after_sold_out',
'tax_category' => 'tax_category',
'channel_pricings' => 'channel_pricings',
'translations' => 'translations'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'code' => 'setCode',
'on_hold' => 'setOnHold',
'on_hand' => 'setOnHand',
'tracked' => 'setTracked',
'visible_after_sold_out' => 'setVisibleAfterSoldOut',
'salable_after_sold_out' => 'setSalableAfterSoldOut',
'tax_category' => 'setTaxCategory',
'channel_pricings' => 'setChannelPricings',
'translations' => 'setTranslations'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'code' => 'getCode',
'on_hold' => 'getOnHold',
'on_hand' => 'getOnHand',
'tracked' => 'getTracked',
'visible_after_sold_out' => 'getVisibleAfterSoldOut',
'salable_after_sold_out' => 'getSalableAfterSoldOut',
'tax_category' => 'getTaxCategory',
'channel_pricings' => 'getChannelPricings',
'translations' => 'getTranslations'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['on_hold'] = isset($data['on_hold']) ? $data['on_hold'] : null;
        $this->container['on_hand'] = isset($data['on_hand']) ? $data['on_hand'] : null;
        $this->container['tracked'] = isset($data['tracked']) ? $data['tracked'] : null;
        $this->container['visible_after_sold_out'] = isset($data['visible_after_sold_out']) ? $data['visible_after_sold_out'] : null;
        $this->container['salable_after_sold_out'] = isset($data['salable_after_sold_out']) ? $data['salable_after_sold_out'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['channel_pricings'] = isset($data['channel_pricings']) ? $data['channel_pricings'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets on_hold
     *
     * @return int
     */
    public function getOnHold()
    {
        return $this->container['on_hold'];
    }

    /**
     * Sets on_hold
     *
     * @param int $on_hold Number of sold tickets
     *
     * @return $this
     */
    public function setOnHold($on_hold)
    {
        $this->container['on_hold'] = $on_hold;

        return $this;
    }

    /**
     * Gets on_hand
     *
     * @return int
     */
    public function getOnHand()
    {
        return $this->container['on_hand'];
    }

    /**
     * Sets on_hand
     *
     * @param int $on_hand Number of available tickets
     *
     * @return $this
     */
    public function setOnHand($on_hand)
    {
        $this->container['on_hand'] = $on_hand;

        return $this;
    }

    /**
     * Gets tracked
     *
     * @return bool
     */
    public function getTracked()
    {
        return $this->container['tracked'];
    }

    /**
     * Sets tracked
     *
     * @param bool $tracked tracked
     *
     * @return $this
     */
    public function setTracked($tracked)
    {
        $this->container['tracked'] = $tracked;

        return $this;
    }

    /**
     * Gets visible_after_sold_out
     *
     * @return bool
     */
    public function getVisibleAfterSoldOut()
    {
        return $this->container['visible_after_sold_out'];
    }

    /**
     * Sets visible_after_sold_out
     *
     * @param bool $visible_after_sold_out visible_after_sold_out
     *
     * @return $this
     */
    public function setVisibleAfterSoldOut($visible_after_sold_out)
    {
        $this->container['visible_after_sold_out'] = $visible_after_sold_out;

        return $this;
    }

    /**
     * Gets salable_after_sold_out
     *
     * @return bool
     */
    public function getSalableAfterSoldOut()
    {
        return $this->container['salable_after_sold_out'];
    }

    /**
     * Sets salable_after_sold_out
     *
     * @param bool $salable_after_sold_out salable_after_sold_out
     *
     * @return $this
     */
    public function setSalableAfterSoldOut($salable_after_sold_out)
    {
        $this->container['salable_after_sold_out'] = $salable_after_sold_out;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return \Swagger\Client\Model\TaxCategory
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param \Swagger\Client\Model\TaxCategory $tax_category tax_category
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets channel_pricings
     *
     * @return map[string,\Swagger\Client\Model\ChannelPricing[]]
     */
    public function getChannelPricings()
    {
        return $this->container['channel_pricings'];
    }

    /**
     * Sets channel_pricings
     *
     * @param map[string,\Swagger\Client\Model\ChannelPricing[]] $channel_pricings Keys reference to code of a channel
     *
     * @return $this
     */
    public function setChannelPricings($channel_pricings)
    {
        $this->container['channel_pricings'] = $channel_pricings;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return map[string,\Swagger\Client\Model\TranslationTicket[]]
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param map[string,\Swagger\Client\Model\TranslationTicket[]] $translations Keys reference to code of a translation
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
