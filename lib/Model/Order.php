<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.15
 * Contact: info@smartevent.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'token_value' => 'string',
'channel' => '\Swagger\Client\Model\Channel[]',
'checkout_state' => 'string',
'items' => '\Swagger\Client\Model\OrderItem[]',
'referer' => 'string',
'google_analytics_code' => 'string',
'invoice_exception' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'token_value' => null,
'channel' => null,
'checkout_state' => null,
'items' => null,
'referer' => null,
'google_analytics_code' => null,
'invoice_exception' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token_value' => 'token_value',
'channel' => 'channel',
'checkout_state' => 'checkout_state',
'items' => 'items',
'referer' => 'referer',
'google_analytics_code' => 'google_analytics_code',
'invoice_exception' => 'invoice_exception'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token_value' => 'setTokenValue',
'channel' => 'setChannel',
'checkout_state' => 'setCheckoutState',
'items' => 'setItems',
'referer' => 'setReferer',
'google_analytics_code' => 'setGoogleAnalyticsCode',
'invoice_exception' => 'setInvoiceException'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token_value' => 'getTokenValue',
'channel' => 'getChannel',
'checkout_state' => 'getCheckoutState',
'items' => 'getItems',
'referer' => 'getReferer',
'google_analytics_code' => 'getGoogleAnalyticsCode',
'invoice_exception' => 'getInvoiceException'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token_value'] = isset($data['token_value']) ? $data['token_value'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['checkout_state'] = isset($data['checkout_state']) ? $data['checkout_state'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['referer'] = isset($data['referer']) ? $data['referer'] : null;
        $this->container['google_analytics_code'] = isset($data['google_analytics_code']) ? $data['google_analytics_code'] : null;
        $this->container['invoice_exception'] = isset($data['invoice_exception']) ? $data['invoice_exception'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token_value
     *
     * @return string
     */
    public function getTokenValue()
    {
        return $this->container['token_value'];
    }

    /**
     * Sets token_value
     *
     * @param string $token_value token_value
     *
     * @return $this
     */
    public function setTokenValue($token_value)
    {
        $this->container['token_value'] = $token_value;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Swagger\Client\Model\Channel[]
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Swagger\Client\Model\Channel[] $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets checkout_state
     *
     * @return string
     */
    public function getCheckoutState()
    {
        return $this->container['checkout_state'];
    }

    /**
     * Sets checkout_state
     *
     * @param string $checkout_state checkout_state
     *
     * @return $this
     */
    public function setCheckoutState($checkout_state)
    {
        $this->container['checkout_state'] = $checkout_state;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\OrderItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\OrderItem[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets referer
     *
     * @return string
     */
    public function getReferer()
    {
        return $this->container['referer'];
    }

    /**
     * Sets referer
     *
     * @param string $referer Id of affiliate referer
     *
     * @return $this
     */
    public function setReferer($referer)
    {
        $this->container['referer'] = $referer;

        return $this;
    }

    /**
     * Gets google_analytics_code
     *
     * @return string
     */
    public function getGoogleAnalyticsCode()
    {
        return $this->container['google_analytics_code'];
    }

    /**
     * Sets google_analytics_code
     *
     * @param string $google_analytics_code Google Analytics conversion code used to send GA notification after payment
     *
     * @return $this
     */
    public function setGoogleAnalyticsCode($google_analytics_code)
    {
        $this->container['google_analytics_code'] = $google_analytics_code;

        return $this;
    }

    /**
     * Gets invoice_exception
     *
     * @return string
     */
    public function getInvoiceException()
    {
        return $this->container['invoice_exception'];
    }

    /**
     * Sets invoice_exception
     *
     * @param string $invoice_exception Information why invoice can not be issued
     *
     * @return $this
     */
    public function setInvoiceException($invoice_exception)
    {
        $this->container['invoice_exception'] = $invoice_exception;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
