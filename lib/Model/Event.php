<?php
/**
 * Event
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Smart Event Open API
 *
 * Smart Event Open API documentation
 *
 * OpenAPI spec version: 2.0.15
 * Contact: info@smartevent.pl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @description Event with its basic information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Event implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'city' => 'string',
'address' => 'string',
'salable' => 'bool',
'visible' => 'bool',
'finished' => 'bool',
'days_count' => 'int',
'available_from' => '\DateTime',
'available_until' => '\DateTime',
'begin_date' => '\DateTime',
'end_date' => '\DateTime',
'visible_from' => '\DateTime',
'visible_until' => '\DateTime',
'translations' => 'map[string,\Swagger\Client\Model\TranslationEvent]',
'tickets' => '\Swagger\Client\Model\Ticket[]',
'images' => '\Swagger\Client\Model\Image[]',
'categories' => '\Swagger\Client\Model\Category[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'city' => null,
'address' => null,
'salable' => null,
'visible' => null,
'finished' => null,
'days_count' => null,
'available_from' => 'date-time',
'available_until' => 'date-time',
'begin_date' => 'date-time',
'end_date' => 'date-time',
'visible_from' => 'date-time',
'visible_until' => 'date-time',
'translations' => null,
'tickets' => null,
'images' => null,
'categories' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'city' => 'city',
'address' => 'address',
'salable' => 'salable',
'visible' => 'visible',
'finished' => 'finished',
'days_count' => 'days_count',
'available_from' => 'available_from',
'available_until' => 'available_until',
'begin_date' => 'begin_date',
'end_date' => 'end_date',
'visible_from' => 'visible_from',
'visible_until' => 'visible_until',
'translations' => 'translations',
'tickets' => 'tickets',
'images' => 'images',
'categories' => 'categories'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'city' => 'setCity',
'address' => 'setAddress',
'salable' => 'setSalable',
'visible' => 'setVisible',
'finished' => 'setFinished',
'days_count' => 'setDaysCount',
'available_from' => 'setAvailableFrom',
'available_until' => 'setAvailableUntil',
'begin_date' => 'setBeginDate',
'end_date' => 'setEndDate',
'visible_from' => 'setVisibleFrom',
'visible_until' => 'setVisibleUntil',
'translations' => 'setTranslations',
'tickets' => 'setTickets',
'images' => 'setImages',
'categories' => 'setCategories'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'city' => 'getCity',
'address' => 'getAddress',
'salable' => 'getSalable',
'visible' => 'getVisible',
'finished' => 'getFinished',
'days_count' => 'getDaysCount',
'available_from' => 'getAvailableFrom',
'available_until' => 'getAvailableUntil',
'begin_date' => 'getBeginDate',
'end_date' => 'getEndDate',
'visible_from' => 'getVisibleFrom',
'visible_until' => 'getVisibleUntil',
'translations' => 'getTranslations',
'tickets' => 'getTickets',
'images' => 'getImages',
'categories' => 'getCategories'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['salable'] = isset($data['salable']) ? $data['salable'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : null;
        $this->container['days_count'] = isset($data['days_count']) ? $data['days_count'] : null;
        $this->container['available_from'] = isset($data['available_from']) ? $data['available_from'] : null;
        $this->container['available_until'] = isset($data['available_until']) ? $data['available_until'] : null;
        $this->container['begin_date'] = isset($data['begin_date']) ? $data['begin_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['visible_from'] = isset($data['visible_from']) ? $data['visible_from'] : null;
        $this->container['visible_until'] = isset($data['visible_until']) ? $data['visible_until'] : null;
        $this->container['translations'] = isset($data['translations']) ? $data['translations'] : null;
        $this->container['tickets'] = isset($data['tickets']) ? $data['tickets'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets salable
     *
     * @return bool
     */
    public function getSalable()
    {
        return $this->container['salable'];
    }

    /**
     * Sets salable
     *
     * @param bool $salable salable
     *
     * @return $this
     */
    public function setSalable($salable)
    {
        $this->container['salable'] = $salable;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible visible
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return bool
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param bool $finished finished
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets days_count
     *
     * @return int
     */
    public function getDaysCount()
    {
        return $this->container['days_count'];
    }

    /**
     * Sets days_count
     *
     * @param int $days_count days_count
     *
     * @return $this
     */
    public function setDaysCount($days_count)
    {
        $this->container['days_count'] = $days_count;

        return $this;
    }

    /**
     * Gets available_from
     *
     * @return \DateTime
     */
    public function getAvailableFrom()
    {
        return $this->container['available_from'];
    }

    /**
     * Sets available_from
     *
     * @param \DateTime $available_from available_from
     *
     * @return $this
     */
    public function setAvailableFrom($available_from)
    {
        $this->container['available_from'] = $available_from;

        return $this;
    }

    /**
     * Gets available_until
     *
     * @return \DateTime
     */
    public function getAvailableUntil()
    {
        return $this->container['available_until'];
    }

    /**
     * Sets available_until
     *
     * @param \DateTime $available_until available_until
     *
     * @return $this
     */
    public function setAvailableUntil($available_until)
    {
        $this->container['available_until'] = $available_until;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return \DateTime
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param \DateTime $begin_date begin_date
     *
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets visible_from
     *
     * @return \DateTime
     */
    public function getVisibleFrom()
    {
        return $this->container['visible_from'];
    }

    /**
     * Sets visible_from
     *
     * @param \DateTime $visible_from visible_from
     *
     * @return $this
     */
    public function setVisibleFrom($visible_from)
    {
        $this->container['visible_from'] = $visible_from;

        return $this;
    }

    /**
     * Gets visible_until
     *
     * @return \DateTime
     */
    public function getVisibleUntil()
    {
        return $this->container['visible_until'];
    }

    /**
     * Sets visible_until
     *
     * @param \DateTime $visible_until visible_until
     *
     * @return $this
     */
    public function setVisibleUntil($visible_until)
    {
        $this->container['visible_until'] = $visible_until;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return map[string,\Swagger\Client\Model\TranslationEvent]
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param map[string,\Swagger\Client\Model\TranslationEvent] $translations Keys reference to locale of a translation
     *
     * @return $this
     */
    public function setTranslations($translations)
    {
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return \Swagger\Client\Model\Ticket[]
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param \Swagger\Client\Model\Ticket[] $tickets tickets
     *
     * @return $this
     */
    public function setTickets($tickets)
    {
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Swagger\Client\Model\Image[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Swagger\Client\Model\Image[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Swagger\Client\Model\Category[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Swagger\Client\Model\Category[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
